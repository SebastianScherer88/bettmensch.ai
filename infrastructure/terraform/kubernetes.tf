################################################################################
# Karpenter
################################################################################

# karpenter controller cant create service linked role for spot, but wont try to do so if the 
# resource already exists before trying to provision spot instances; solution as per
# https://github.com/terraform-aws-modules/terraform-aws-eks/issues/2565
resource "aws_iam_service_linked_role" "AWSServiceRoleForEC2Spot" {
  aws_service_name = "spot.amazonaws.com"
}

module "karpenter" {
  source = "terraform-aws-modules/eks/aws//modules/karpenter"

  cluster_name = module.eks.cluster_name

  # EKS Fargate currently does not support Pod Identity
  enable_irsa            = true
  irsa_oidc_provider_arn = module.eks.oidc_provider_arn

  # Used to attach additional IAM policies to the Karpenter node IAM role
  node_iam_role_additional_policies = {
    AmazonSSMManagedInstanceCore = "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
  }

  tags = local.tags
}

module "karpenter_disabled" {
  source = "terraform-aws-modules/eks/aws//modules/karpenter"

  create = false
}

 # karpenter installation
data "aws_ecrpublic_authorization_token" "token" {
  provider = aws.north_virginia
}
resource "helm_release" "karpenter" {
  namespace           = "karpenter"
  create_namespace    = true
  name                = "karpenter"
  repository          = "oci://public.ecr.aws/karpenter"
  repository_username = data.aws_ecrpublic_authorization_token.token.user_name
  repository_password = data.aws_ecrpublic_authorization_token.token.password
  chart               = "karpenter"
  version             = "0.35.1"
  wait                = false

  values = [
    <<-EOT
    settings:
      clusterName: ${module.eks.cluster_name}
      clusterEndpoint: ${module.eks.cluster_endpoint}
      interruptionQueue: ${module.karpenter.queue_name}
    serviceAccount:
      annotations:
        eks.amazonaws.com/role-arn: ${module.karpenter.iam_role_arn}
    EOT
  ]

}

# karpenter node class
resource "kubectl_manifest" "karpenter_node_class" {

    yaml_body = <<-YAML
      apiVersion: karpenter.k8s.aws/v1beta1
      kind: EC2NodeClass
      metadata:
        name: bettmensch-ai-default
      spec:
        # Required, resolves a default ami and userdata
        amiFamily: AL2

        # Required, discovers subnets to attach to instances
        # Each term in the array of subnetSelectorTerms is ORed together
        # Within a single term, all conditions are ANDed
        subnetSelectorTerms:
          - tags:
              karpenter.sh/discovery: ${module.eks.cluster_name}

        # Required, discovers security groups to attach to instances
        # Each term in the array of securityGroupSelectorTerms is ORed together
        # Within a single term, all conditions are ANDed
        securityGroupSelectorTerms:
          # Select on any security group that has both the "karpenter.sh/discovery: <<CLUSTER_NAME>>" tag
          # AND the "environment: test" tag OR any security group with the "my-security-group" name
          # OR any security group with ID "sg-063d7acfb4b06c82c"
          - tags:
              karpenter.sh/discovery: ${module.eks.cluster_name}

        # Optional, IAM role to use for the node identity.
        # The "role" field is immutable after EC2NodeClass creation. This may change in the
        # future, but this restriction is currently in place today to ensure that Karpenter
        # avoids leaking managed instance profiles in your account.
        # Must specify one of "role" or "instanceProfile" for Karpenter to launch nodes
        role: ${module.karpenter.node_iam_role_name}

        # Optional, overrides autogenerated userdata with a merge semantic
        userData: |
          echo "Hello world"    

        # Optional, propagates tags to underlying EC2 resources
        tags:
          ec2nodeclass: bettmensch-ai-default
          karpenter.sh/discovery: ${module.eks.cluster_name}

        # Optional, configures IMDS for the instance
        metadataOptions:
          httpEndpoint: enabled
          httpProtocolIPv6: disabled
          httpPutResponseHopLimit: 2
          httpTokens: required

        # Optional, configures storage devices for the instance
        blockDeviceMappings:
          - deviceName: /dev/xvda
            ebs:
              volumeSize: 100Gi
              volumeType: gp3
              iops: 10000
              encrypted: true
              deleteOnTermination: true
              throughput: 125
  YAML

  depends_on = [
    helm_release.karpenter
  ]
}

# karpenter nodepool
data "kubectl_file_documents" "karpenter_node_pool" {
    content = file("../../kubernetes/manifests/karpenter/karpenter-nodepool.yaml")
}

resource "kubectl_manifest" "karpenter_node_pool" {
  for_each  = data.kubectl_file_documents.karpenter_node_pool.manifests
  yaml_body = each.value
  
  depends_on = [
    kubectl_manifest.karpenter_node_class
  ]
}

################################################################################
# Nvidia device plugin (GPUs)
################################################################################

resource "helm_release" "nvidia-device-plugin" {
  namespace           = "kube-system"
  create_namespace    = false
  name                = "nvidia-device-plugin"
  repository          = "https://nvidia.github.io/k8s-device-plugin"
  chart               = "nvidia-device-plugin"
  version             = "0.15.0"
  wait                = false

  values = [
    <<-EOT
    affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: karpenter.k8s.aws/instance-gpu-count # karpenter applies this "well known" label
                operator: Exists
              - key: karpenter.k8s.aws/instance-gpu-count # karpenter applies this "well known" label
                operator: Gt
                values:
                - "0"
    EOT
  ]

}

################################################################################
# Argo Workflows
################################################################################

# argo workflows installation
data "kubectl_file_documents" "argo_workflows" {
    content = file("../../kubernetes/manifests/argo_workflows/argo-workflows-installation.yaml")
}

resource "kubectl_manifest" "argo_workflows" {
    for_each  = data.kubectl_file_documents.argo_workflows.manifests
    yaml_body = each.value

    depends_on = [
    kubectl_manifest.karpenter_node_pool
  ]
}

# argo artifact repository configuration
resource "kubectl_manifest" "argo_workflows_artifact_repository" {
  yaml_body = <<-YAML
    apiVersion: v1
    kind: ConfigMap
    metadata:
      annotations:
        workflows.argoproj.io/default-artifact-repository: bettmensch-ai-artifact-repository
      name: artifact-repositories
      namespace: argo
    data:
      bettmensch-ai-artifact-repository: |
        s3:
          bucket: ${resource.aws_s3_bucket.artifact_repository.id}
          keyFormat: argo-workflows # prefix, since argo workflows and mlflow share this bucket
          endpoint: s3.${local.region}.amazonaws.com
          insecure: true
  YAML

  depends_on = [
    kubectl_manifest.karpenter_node_pool
  ]
}
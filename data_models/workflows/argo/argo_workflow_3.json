{
    "metadata": {
        "name": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq",
        "generate_name": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-",
        "namespace": "argo",
        "uid": "bfe2cd60-7fa7-48ba-96f1-0845dbc142a8",
        "resource_version": "16194",
        "generation": 18,
        "creation_timestamp": "test-datetime-value",
        "labels": {
            "workflows.argoproj.io/completed": "true",
            "workflows.argoproj.io/creator": "system-serviceaccount-argo-argo-server",
            "workflows.argoproj.io/phase": "Succeeded"
        },
        "annotations": {
            "karpenter.sh/do-not-disrupt": "true",
            "workflows.argoproj.io/pod-name-format": "v2"
        },
        "managed_fields": [
            {
                "manager": "argo",
                "operation": "Update",
                "api_version": "argoproj.io/v1alpha1",
                "time": "test-datetime-value",
                "fields_type": "FieldsV1",
                "fields_v1": {
                    "f:metadata": {
                        "f:generateName": {},
                        "f:labels": {
                            ".": {},
                            "f:workflows.argoproj.io/creator": {}
                        }
                    },
                    "f:spec": {}
                }
            },
            {
                "manager": "workflow-controller",
                "operation": "Update",
                "api_version": "argoproj.io/v1alpha1",
                "time": "test-datetime-value",
                "fields_type": "FieldsV1",
                "fields_v1": {
                    "f:metadata": {
                        "f:annotations": {
                            ".": {},
                            "f:karpenter.sh/do-not-disrupt": {},
                            "f:workflows.argoproj.io/pod-name-format": {}
                        },
                        "f:labels": {
                            "f:workflows.argoproj.io/completed": {},
                            "f:workflows.argoproj.io/phase": {}
                        }
                    },
                    "f:status": {}
                }
            }
        ]
    },
    "spec": {
        "arguments": {
            "parameters": [
                {
                    "name": "max_time",
                    "value": "00:00:00:20"
                }
            ]
        },
        "workflow_template_ref": {
            "name": "pipeline-test-lightning-cpu-pipeline-c8drk"
        }
    },
    "status": {
        "phase": "Succeeded",
        "started_at": "test-datetime-value",
        "finished_at": "test-datetime-value",
        "progress": "9/10",
        "nodes": {
            "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq": {
                "id": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq",
                "name": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq",
                "type": "DAG",
                "display_name": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq",
                "template_name": "bettmensch-ai-dag",
                "template_scope": "local/",
                "phase": "Succeeded",
                "started_at": "test-datetime-value",
                "finished_at": "test-datetime-value",
                "progress": "9/10",
                "resources_duration": {
                    "cpu": 235,
                    "memory": 4168
                },
                "children": [
                    "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-3979811449"
                ],
                "outbound_nodes": [
                    "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-2520177762",
                    "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-1557279593",
                    "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-888842340",
                    "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-3039208291",
                    "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-3550627230",
                    "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-3659131042",
                    "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-3551413979"
                ]
            },
            "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-1557279593": {
                "id": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-1557279593",
                "name": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq.lightning-ddp-0-worker-2(0)",
                "type": "Pod",
                "display_name": "lightning-ddp-0-worker-2(0)",
                "template_name": "lightning-ddp-2",
                "template_scope": "local/",
                "phase": "Succeeded",
                "boundary_id": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq",
                "started_at": "test-datetime-value",
                "finished_at": "test-datetime-value",
                "progress": "1/1",
                "resources_duration": {
                    "cpu": 52,
                    "memory": 898
                },
                "node_flag": {
                    "retried": true
                },
                "inputs": {
                    "parameters": [
                        {
                            "name": "max_time",
                            "default": "00:00:00:30",
                            "value": "00:00:00:20"
                        },
                        {
                            "name": "duration",
                            "default": "null",
                            "value": "null"
                        }
                    ]
                },
                "outputs": {
                    "parameters": [
                        {
                            "name": "duration",
                            "value": "0:00:20.986543",
                            "value_from": {
                                "path": "duration"
                            }
                        }
                    ],
                    "exit_code": "0"
                },
                "host_node_name": "ip-10-0-50-203.us-east-2.compute.internal"
            },
            "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-23383813": {
                "id": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-23383813",
                "name": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq.lightning-ddp-0-worker-3",
                "type": "Retry",
                "display_name": "lightning-ddp-0-worker-3",
                "template_name": "lightning-ddp-3",
                "template_scope": "local/",
                "phase": "Succeeded",
                "boundary_id": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq",
                "started_at": "test-datetime-value",
                "finished_at": "test-datetime-value",
                "progress": "1/1",
                "resources_duration": {
                    "cpu": 39,
                    "memory": 684
                },
                "inputs": {
                    "parameters": [
                        {
                            "name": "max_time",
                            "default": "00:00:00:30",
                            "value": "00:00:00:20"
                        },
                        {
                            "name": "duration",
                            "default": "null",
                            "value": "null"
                        }
                    ]
                },
                "outputs": {
                    "parameters": [
                        {
                            "name": "duration",
                            "value": "0:00:21.132619",
                            "value_from": {
                                "path": "duration"
                            }
                        }
                    ],
                    "exit_code": "0"
                },
                "children": [
                    "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-888842340"
                ]
            },
            "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-2520177762": {
                "id": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-2520177762",
                "name": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq.lightning-ddp-0-worker-1(0)",
                "type": "Pod",
                "display_name": "lightning-ddp-0-worker-1(0)",
                "template_name": "lightning-ddp-1",
                "template_scope": "local/",
                "phase": "Succeeded",
                "boundary_id": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq",
                "started_at": "test-datetime-value",
                "finished_at": "test-datetime-value",
                "progress": "1/1",
                "resources_duration": {
                    "cpu": 52,
                    "memory": 899
                },
                "node_flag": {
                    "retried": true
                },
                "inputs": {
                    "parameters": [
                        {
                            "name": "max_time",
                            "default": "00:00:00:30",
                            "value": "00:00:00:20"
                        },
                        {
                            "name": "duration",
                            "default": "null",
                            "value": "null"
                        }
                    ]
                },
                "outputs": {
                    "parameters": [
                        {
                            "name": "duration",
                            "value": "0:00:20.512020",
                            "value_from": {
                                "path": "duration"
                            }
                        }
                    ],
                    "exit_code": "0"
                },
                "host_node_name": "ip-10-0-48-52.us-east-2.compute.internal"
            },
            "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-3039208291": {
                "id": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-3039208291",
                "name": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq.lightning-ddp-0-worker-4(0)",
                "type": "Pod",
                "display_name": "lightning-ddp-0-worker-4(0)",
                "template_name": "lightning-ddp-4",
                "template_scope": "local/",
                "phase": "Succeeded",
                "boundary_id": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq",
                "started_at": "test-datetime-value",
                "finished_at": "test-datetime-value",
                "progress": "1/1",
                "resources_duration": {
                    "cpu": 36,
                    "memory": 633
                },
                "node_flag": {
                    "retried": true
                },
                "inputs": {
                    "parameters": [
                        {
                            "name": "max_time",
                            "default": "00:00:00:30",
                            "value": "00:00:00:20"
                        },
                        {
                            "name": "duration",
                            "default": "null",
                            "value": "null"
                        }
                    ]
                },
                "outputs": {
                    "parameters": [
                        {
                            "name": "duration",
                            "value": "0:00:21.044815",
                            "value_from": {
                                "path": "duration"
                            }
                        }
                    ],
                    "exit_code": "0"
                },
                "host_node_name": "ip-10-0-48-203.us-east-2.compute.internal"
            },
            "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-3550627230": {
                "id": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-3550627230",
                "name": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq.lightning-ddp-0-worker-5(0)",
                "type": "Pod",
                "display_name": "lightning-ddp-0-worker-5(0)",
                "template_name": "lightning-ddp-5",
                "template_scope": "local/",
                "phase": "Succeeded",
                "boundary_id": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq",
                "started_at": "test-datetime-value",
                "finished_at": "test-datetime-value",
                "progress": "1/1",
                "resources_duration": {
                    "cpu": 28,
                    "memory": 519
                },
                "node_flag": {
                    "retried": true
                },
                "inputs": {
                    "parameters": [
                        {
                            "name": "max_time",
                            "default": "00:00:00:30",
                            "value": "00:00:00:20"
                        },
                        {
                            "name": "duration",
                            "default": "null",
                            "value": "null"
                        }
                    ]
                },
                "outputs": {
                    "parameters": [
                        {
                            "name": "duration",
                            "value": "0:00:21.170848",
                            "value_from": {
                                "path": "duration"
                            }
                        }
                    ],
                    "exit_code": "0"
                },
                "host_node_name": "ip-10-0-48-142.us-east-2.compute.internal"
            },
            "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-3551413979": {
                "id": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-3551413979",
                "name": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq.show-duration-param-0(1)",
                "type": "Pod",
                "display_name": "show-duration-param-0(1)",
                "template_name": "show-duration-param",
                "template_scope": "local/",
                "phase": "Succeeded",
                "boundary_id": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq",
                "started_at": "test-datetime-value",
                "finished_at": "test-datetime-value",
                "progress": "1/1",
                "resources_duration": {
                    "cpu": 1,
                    "memory": 25
                },
                "node_flag": {
                    "retried": true
                },
                "inputs": {
                    "parameters": [
                        {
                            "name": "a",
                            "value": "0:00:20.968705"
                        }
                    ]
                },
                "outputs": {
                    "exit_code": "0"
                },
                "host_node_name": "ip-10-0-48-52.us-east-2.compute.internal"
            },
            "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-3659131042": {
                "id": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-3659131042",
                "name": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq.lightning-ddp-delete-torch-service",
                "type": "Pod",
                "display_name": "lightning-ddp-delete-torch-service",
                "template_name": "lightning-ddp-delete-torch-service",
                "template_scope": "local/",
                "phase": "Succeeded",
                "boundary_id": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq",
                "started_at": "test-datetime-value",
                "finished_at": "test-datetime-value",
                "progress": "1/1",
                "resources_duration": {
                    "cpu": 0,
                    "memory": 0
                },
                "outputs": {
                    "exit_code": "0"
                },
                "host_node_name": "ip-10-0-48-142.us-east-2.compute.internal"
            },
            "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-3979811449": {
                "id": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-3979811449",
                "name": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq.lightning-ddp-create-torch-service",
                "type": "Pod",
                "display_name": "lightning-ddp-create-torch-service",
                "template_name": "lightning-ddp-create-torch-service",
                "template_scope": "local/",
                "phase": "Succeeded",
                "boundary_id": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq",
                "started_at": "test-datetime-value",
                "finished_at": "test-datetime-value",
                "progress": "1/1",
                "resources_duration": {
                    "cpu": 0,
                    "memory": 0
                },
                "outputs": {
                    "exit_code": "0"
                },
                "children": [
                    "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-4284795871",
                    "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-6606194",
                    "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-23383813",
                    "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-4200907776",
                    "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-4217685395",
                    "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-4087624356"
                ],
                "host_node_name": "ip-10-0-48-52.us-east-2.compute.internal"
            },
            "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-4087624356": {
                "id": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-4087624356",
                "name": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq.lightning-ddp-0",
                "type": "Retry",
                "display_name": "lightning-ddp-0",
                "template_name": "lightning-ddp-0",
                "template_scope": "local/",
                "phase": "Succeeded",
                "boundary_id": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq",
                "started_at": "test-datetime-value",
                "finished_at": "test-datetime-value",
                "progress": "3/4",
                "resources_duration": {
                    "cpu": 28,
                    "memory": 535
                },
                "inputs": {
                    "parameters": [
                        {
                            "name": "max_time",
                            "default": "00:00:00:30",
                            "value": "00:00:00:20"
                        },
                        {
                            "name": "duration",
                            "default": "null",
                            "value": "null"
                        }
                    ]
                },
                "outputs": {
                    "parameters": [
                        {
                            "name": "duration",
                            "value": "0:00:20.968705",
                            "value_from": {
                                "path": "duration"
                            }
                        }
                    ],
                    "exit_code": "0"
                },
                "children": [
                    "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-4212313871"
                ]
            },
            "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-4200907776": {
                "id": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-4200907776",
                "name": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq.lightning-ddp-0-worker-4",
                "type": "Retry",
                "display_name": "lightning-ddp-0-worker-4",
                "template_name": "lightning-ddp-4",
                "template_scope": "local/",
                "phase": "Succeeded",
                "boundary_id": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq",
                "started_at": "test-datetime-value",
                "finished_at": "test-datetime-value",
                "progress": "1/1",
                "resources_duration": {
                    "cpu": 36,
                    "memory": 633
                },
                "inputs": {
                    "parameters": [
                        {
                            "name": "max_time",
                            "default": "00:00:00:30",
                            "value": "00:00:00:20"
                        },
                        {
                            "name": "duration",
                            "default": "null",
                            "value": "null"
                        }
                    ]
                },
                "outputs": {
                    "parameters": [
                        {
                            "name": "duration",
                            "value": "0:00:21.044815",
                            "value_from": {
                                "path": "duration"
                            }
                        }
                    ],
                    "exit_code": "0"
                },
                "children": [
                    "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-3039208291"
                ]
            },
            "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-4212313871": {
                "id": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-4212313871",
                "name": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq.lightning-ddp-0(0)",
                "type": "Pod",
                "display_name": "lightning-ddp-0(0)",
                "template_name": "lightning-ddp-0",
                "template_scope": "local/",
                "phase": "Succeeded",
                "boundary_id": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq",
                "started_at": "test-datetime-value",
                "finished_at": "test-datetime-value",
                "progress": "1/1",
                "resources_duration": {
                    "cpu": 27,
                    "memory": 510
                },
                "node_flag": {
                    "retried": true
                },
                "inputs": {
                    "parameters": [
                        {
                            "name": "max_time",
                            "default": "00:00:00:30",
                            "value": "00:00:00:20"
                        },
                        {
                            "name": "duration",
                            "default": "null",
                            "value": "null"
                        }
                    ]
                },
                "outputs": {
                    "parameters": [
                        {
                            "name": "duration",
                            "value": "0:00:20.968705",
                            "value_from": {
                                "path": "duration"
                            }
                        }
                    ],
                    "exit_code": "0"
                },
                "children": [
                    "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-3659131042",
                    "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-932828499"
                ],
                "host_node_name": "ip-10-0-50-149.us-east-2.compute.internal"
            },
            "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-4217685395": {
                "id": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-4217685395",
                "name": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq.lightning-ddp-0-worker-5",
                "type": "Retry",
                "display_name": "lightning-ddp-0-worker-5",
                "template_name": "lightning-ddp-5",
                "template_scope": "local/",
                "phase": "Succeeded",
                "boundary_id": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq",
                "started_at": "test-datetime-value",
                "finished_at": "test-datetime-value",
                "progress": "1/1",
                "resources_duration": {
                    "cpu": 28,
                    "memory": 519
                },
                "inputs": {
                    "parameters": [
                        {
                            "name": "max_time",
                            "default": "00:00:00:30",
                            "value": "00:00:00:20"
                        },
                        {
                            "name": "duration",
                            "default": "null",
                            "value": "null"
                        }
                    ]
                },
                "outputs": {
                    "parameters": [
                        {
                            "name": "duration",
                            "value": "0:00:21.170848",
                            "value_from": {
                                "path": "duration"
                            }
                        }
                    ],
                    "exit_code": "0"
                },
                "children": [
                    "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-3550627230"
                ]
            },
            "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-4284795871": {
                "id": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-4284795871",
                "name": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq.lightning-ddp-0-worker-1",
                "type": "Retry",
                "display_name": "lightning-ddp-0-worker-1",
                "template_name": "lightning-ddp-1",
                "template_scope": "local/",
                "phase": "Succeeded",
                "boundary_id": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq",
                "started_at": "test-datetime-value",
                "finished_at": "test-datetime-value",
                "progress": "1/1",
                "resources_duration": {
                    "cpu": 52,
                    "memory": 899
                },
                "inputs": {
                    "parameters": [
                        {
                            "name": "max_time",
                            "default": "00:00:00:30",
                            "value": "00:00:00:20"
                        },
                        {
                            "name": "duration",
                            "default": "null",
                            "value": "null"
                        }
                    ]
                },
                "outputs": {
                    "parameters": [
                        {
                            "name": "duration",
                            "value": "0:00:20.512020",
                            "value_from": {
                                "path": "duration"
                            }
                        }
                    ],
                    "exit_code": "0"
                },
                "children": [
                    "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-2520177762"
                ]
            },
            "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-6606194": {
                "id": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-6606194",
                "name": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq.lightning-ddp-0-worker-2",
                "type": "Retry",
                "display_name": "lightning-ddp-0-worker-2",
                "template_name": "lightning-ddp-2",
                "template_scope": "local/",
                "phase": "Succeeded",
                "boundary_id": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq",
                "started_at": "test-datetime-value",
                "finished_at": "test-datetime-value",
                "progress": "1/1",
                "resources_duration": {
                    "cpu": 52,
                    "memory": 898
                },
                "inputs": {
                    "parameters": [
                        {
                            "name": "max_time",
                            "default": "00:00:00:30",
                            "value": "00:00:00:20"
                        },
                        {
                            "name": "duration",
                            "default": "null",
                            "value": "null"
                        }
                    ]
                },
                "outputs": {
                    "parameters": [
                        {
                            "name": "duration",
                            "value": "0:00:20.986543",
                            "value_from": {
                                "path": "duration"
                            }
                        }
                    ],
                    "exit_code": "0"
                },
                "children": [
                    "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-1557279593"
                ]
            },
            "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-888842340": {
                "id": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-888842340",
                "name": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq.lightning-ddp-0-worker-3(0)",
                "type": "Pod",
                "display_name": "lightning-ddp-0-worker-3(0)",
                "template_name": "lightning-ddp-3",
                "template_scope": "local/",
                "phase": "Succeeded",
                "boundary_id": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq",
                "started_at": "test-datetime-value",
                "finished_at": "test-datetime-value",
                "progress": "1/1",
                "resources_duration": {
                    "cpu": 39,
                    "memory": 684
                },
                "node_flag": {
                    "retried": true
                },
                "inputs": {
                    "parameters": [
                        {
                            "name": "max_time",
                            "default": "00:00:00:30",
                            "value": "00:00:00:20"
                        },
                        {
                            "name": "duration",
                            "default": "null",
                            "value": "null"
                        }
                    ]
                },
                "outputs": {
                    "parameters": [
                        {
                            "name": "duration",
                            "value": "0:00:21.132619",
                            "value_from": {
                                "path": "duration"
                            }
                        }
                    ],
                    "exit_code": "0"
                },
                "host_node_name": "ip-10-0-49-32.us-east-2.compute.internal"
            },
            "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-932828499": {
                "id": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-932828499",
                "name": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq.show-duration-param-0",
                "type": "Retry",
                "display_name": "show-duration-param-0",
                "template_name": "show-duration-param",
                "template_scope": "local/",
                "phase": "Succeeded",
                "boundary_id": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq",
                "started_at": "test-datetime-value",
                "finished_at": "test-datetime-value",
                "progress": "1/2",
                "resources_duration": {
                    "cpu": 1,
                    "memory": 25
                },
                "inputs": {
                    "parameters": [
                        {
                            "name": "a",
                            "value": "0:00:20.968705"
                        }
                    ]
                },
                "outputs": {
                    "exit_code": "0"
                },
                "children": [
                    "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-934355678",
                    "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-3551413979"
                ]
            },
            "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-934355678": {
                "id": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-934355678",
                "name": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq.show-duration-param-0(0)",
                "type": "Pod",
                "display_name": "show-duration-param-0(0)",
                "template_name": "show-duration-param",
                "template_scope": "local/",
                "phase": "Error",
                "boundary_id": "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq",
                "message": "pod deleted",
                "started_at": "test-datetime-value",
                "finished_at": "test-datetime-value",
                "progress": "0/1",
                "node_flag": {
                    "retried": true
                },
                "inputs": {
                    "parameters": [
                        {
                            "name": "a",
                            "value": "0:00:20.968705"
                        }
                    ]
                },
                "host_node_name": "ip-10-0-50-149.us-east-2.compute.internal"
            }
        },
        "stored_templates": {
            "namespaced/pipeline-test-lightning-cpu-pipeline-c8drk/bettmensch-ai-dag": {
                "name": "bettmensch-ai-dag",
                "inputs": {},
                "outputs": {},
                "metadata": {},
                "dag": {
                    "tasks": [
                        {
                            "name": "lightning-ddp-create-torch-service",
                            "template": "lightning-ddp-create-torch-service",
                            "arguments": {}
                        },
                        {
                            "name": "lightning-ddp-0",
                            "template": "lightning-ddp-0",
                            "arguments": {
                                "parameters": [
                                    {
                                        "name": "max_time",
                                        "value": "{{workflow.parameters.max_time}}"
                                    }
                                ]
                            },
                            "depends": "lightning-ddp-create-torch-service"
                        },
                        {
                            "name": "lightning-ddp-0-worker-1",
                            "template": "lightning-ddp-1",
                            "arguments": {
                                "parameters": [
                                    {
                                        "name": "max_time",
                                        "value": "{{workflow.parameters.max_time}}"
                                    }
                                ]
                            },
                            "depends": "lightning-ddp-create-torch-service"
                        },
                        {
                            "name": "lightning-ddp-0-worker-2",
                            "template": "lightning-ddp-2",
                            "arguments": {
                                "parameters": [
                                    {
                                        "name": "max_time",
                                        "value": "{{workflow.parameters.max_time}}"
                                    }
                                ]
                            },
                            "depends": "lightning-ddp-create-torch-service"
                        },
                        {
                            "name": "lightning-ddp-0-worker-3",
                            "template": "lightning-ddp-3",
                            "arguments": {
                                "parameters": [
                                    {
                                        "name": "max_time",
                                        "value": "{{workflow.parameters.max_time}}"
                                    }
                                ]
                            },
                            "depends": "lightning-ddp-create-torch-service"
                        },
                        {
                            "name": "lightning-ddp-0-worker-4",
                            "template": "lightning-ddp-4",
                            "arguments": {
                                "parameters": [
                                    {
                                        "name": "max_time",
                                        "value": "{{workflow.parameters.max_time}}"
                                    }
                                ]
                            },
                            "depends": "lightning-ddp-create-torch-service"
                        },
                        {
                            "name": "lightning-ddp-0-worker-5",
                            "template": "lightning-ddp-5",
                            "arguments": {
                                "parameters": [
                                    {
                                        "name": "max_time",
                                        "value": "{{workflow.parameters.max_time}}"
                                    }
                                ]
                            },
                            "depends": "lightning-ddp-create-torch-service"
                        },
                        {
                            "name": "lightning-ddp-delete-torch-service",
                            "template": "lightning-ddp-delete-torch-service",
                            "arguments": {},
                            "depends": "lightning-ddp-0"
                        },
                        {
                            "name": "show-duration-param-0",
                            "template": "show-duration-param",
                            "arguments": {
                                "parameters": [
                                    {
                                        "name": "a",
                                        "value": "{{tasks.lightning-ddp-0.outputs.parameters.duration}}"
                                    }
                                ]
                            },
                            "depends": "lightning-ddp-0"
                        }
                    ]
                }
            },
            "namespaced/pipeline-test-lightning-cpu-pipeline-c8drk/lightning-ddp-0": {
                "name": "lightning-ddp-0",
                "inputs": {
                    "parameters": [
                        {
                            "name": "max_time",
                            "default": "00:00:00:30"
                        },
                        {
                            "name": "duration",
                            "default": "null"
                        }
                    ]
                },
                "outputs": {
                    "parameters": [
                        {
                            "name": "duration",
                            "value_from": {
                                "path": "duration"
                            }
                        }
                    ]
                },
                "metadata": {
                    "labels": {
                        "torch-job": "lightning-ddp-0-6dfeb612-01b3-40f6-b40c-64eb9cc9eb6e",
                        "torch-node": "0"
                    }
                },
                "script": {
                    "image": "bettmensch88/bettmensch.ai-lightning:3.11-latest",
                    "source": "import os\nimport sys\nsys.path.append(os.getcwd())\n\n# --- preprocessing\nimport json\ntry: max_time = json.loads(r'''{{inputs.parameters.max_time}}''')\nexcept: max_time = r'''{{inputs.parameters.max_time}}'''\n\nfrom bettmensch_ai.io import InputParameter\n\nfrom bettmensch_ai.io import OutputParameter\nduration = OutputParameter(\"duration\")\n\ndef lightning_ddp(max_time: InputParameter='00:00:00:30', duration: OutputParameter=None) -> None:\n    \"\"\"When decorated with the torch_component decorator, implements a\n    bettmensch_ai.TorchComponent that runs a torch DDP across pods and nodes in\n    your K8s cluster.\"\"\"\n    from datetime import datetime as dt\n    import lightning.pytorch as pl\n    import torch\n    from bettmensch_ai.components.torch_utils import LaunchConfigSettings\n    from lightning.pytorch.strategies import DDPStrategy\n    start = dt.now()\n\n    class ToyExample(pl.LightningModule):\n\n        def __init__(self, model):\n            super().__init__()\n            self.model = model\n\n        def training_step(self, batch):\n            loss = self.model(batch).sum()\n            return loss\n\n        def configure_optimizers(self):\n            return torch.optim.Adam(self.model.parameters())\n    model = torch.nn.Linear(32, 2)\n    pl_module = ToyExample(model)\n    train_dataloader = torch.utils.data.DataLoader(torch.randn(8, 32))\n    has_gpu = torch.cuda.is_available()\n    print(f'GPU present: {has_gpu}')\n    process_group_backend = 'nccl' if has_gpu else 'gloo'\n    accelerator = 'gpu' if has_gpu else 'cpu'\n    ddp = DDPStrategy(process_group_backend=process_group_backend)\n    launch_settings = LaunchConfigSettings()\n    trainer = pl.Trainer(strategy=ddp, accelerator=accelerator, num_nodes=launch_settings.max_nodes, devices=launch_settings.nproc_per_node, max_time=max_time)\n    trainer.fit(pl_module, train_dataloader)\n    if duration is not None:\n        duration.assign(dt.now() - start)\n\nfrom bettmensch_ai.components import torch_distribute\n\ntorch_distribute_decorator=torch_distribute()\ntorch_distributed_function=torch_distribute_decorator(lightning_ddp)\n\ntorch_distributed_function(max_time,duration)",
                    "name": "",
                    "command": [
                        "python"
                    ],
                    "ports": [
                        {
                            "container_port": 29200,
                            "name": "ddp",
                            "protocol": "TCP"
                        }
                    ],
                    "env": [
                        {
                            "name": "NCCL_DEBUG",
                            "value": "INFO"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_min_nodes",
                            "value": "6"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_max_nodes",
                            "value": "6"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_node_rank",
                            "value": "0"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_nproc_per_node",
                            "value": "1"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_max_restarts",
                            "value": "1"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_start_method",
                            "value": "fork"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_rdzv_backend",
                            "value": "static"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_rdzv_endpoint_url",
                            "value": "lightning-ddp-0-6dfeb612-01b3-40f6-b40c-64eb9cc9eb6e.argo.svc.cluster.local"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_rdzv_endpoint_port",
                            "value": "29200"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_run_id",
                            "value": "1"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_tee",
                            "value": "0"
                        }
                    ],
                    "resources": {
                        "limits": {
                            "cpu": "700m",
                            "memory": "1Gi"
                        },
                        "requests": {
                            "cpu": "700m",
                            "memory": "1Gi"
                        }
                    },
                    "image_pull_policy": "Always"
                },
                "retry_strategy": {
                    "limit": "1",
                    "retry_policy": "OnError"
                },
                "pod_spec_patch": "topologySpreadConstraints:\n- maxSkew: 1\n  topologyKey: kubernetes.io/hostname\n  whenUnsatisfiable: DoNotSchedule\n  labelSelector:\n    matchExpressions:\n      - { key: torch-node, operator: In, values: ['0','1','2','3','4','5']}"
            },
            "namespaced/pipeline-test-lightning-cpu-pipeline-c8drk/lightning-ddp-1": {
                "name": "lightning-ddp-1",
                "inputs": {
                    "parameters": [
                        {
                            "name": "max_time",
                            "default": "00:00:00:30"
                        },
                        {
                            "name": "duration",
                            "default": "null"
                        }
                    ]
                },
                "outputs": {
                    "parameters": [
                        {
                            "name": "duration",
                            "value_from": {
                                "path": "duration"
                            }
                        }
                    ]
                },
                "metadata": {
                    "labels": {
                        "torch-job": "lightning-ddp-0-6dfeb612-01b3-40f6-b40c-64eb9cc9eb6e",
                        "torch-node": "1"
                    }
                },
                "script": {
                    "image": "bettmensch88/bettmensch.ai-lightning:3.11-latest",
                    "source": "import os\nimport sys\nsys.path.append(os.getcwd())\n\n# --- preprocessing\nimport json\ntry: max_time = json.loads(r'''{{inputs.parameters.max_time}}''')\nexcept: max_time = r'''{{inputs.parameters.max_time}}'''\n\nfrom bettmensch_ai.io import InputParameter\n\nfrom bettmensch_ai.io import OutputParameter\nduration = OutputParameter(\"duration\")\n\ndef lightning_ddp(max_time: InputParameter='00:00:00:30', duration: OutputParameter=None) -> None:\n    \"\"\"When decorated with the torch_component decorator, implements a\n    bettmensch_ai.TorchComponent that runs a torch DDP across pods and nodes in\n    your K8s cluster.\"\"\"\n    from datetime import datetime as dt\n    import lightning.pytorch as pl\n    import torch\n    from bettmensch_ai.components.torch_utils import LaunchConfigSettings\n    from lightning.pytorch.strategies import DDPStrategy\n    start = dt.now()\n\n    class ToyExample(pl.LightningModule):\n\n        def __init__(self, model):\n            super().__init__()\n            self.model = model\n\n        def training_step(self, batch):\n            loss = self.model(batch).sum()\n            return loss\n\n        def configure_optimizers(self):\n            return torch.optim.Adam(self.model.parameters())\n    model = torch.nn.Linear(32, 2)\n    pl_module = ToyExample(model)\n    train_dataloader = torch.utils.data.DataLoader(torch.randn(8, 32))\n    has_gpu = torch.cuda.is_available()\n    print(f'GPU present: {has_gpu}')\n    process_group_backend = 'nccl' if has_gpu else 'gloo'\n    accelerator = 'gpu' if has_gpu else 'cpu'\n    ddp = DDPStrategy(process_group_backend=process_group_backend)\n    launch_settings = LaunchConfigSettings()\n    trainer = pl.Trainer(strategy=ddp, accelerator=accelerator, num_nodes=launch_settings.max_nodes, devices=launch_settings.nproc_per_node, max_time=max_time)\n    trainer.fit(pl_module, train_dataloader)\n    if duration is not None:\n        duration.assign(dt.now() - start)\n\nfrom bettmensch_ai.components import torch_distribute\n\ntorch_distribute_decorator=torch_distribute()\ntorch_distributed_function=torch_distribute_decorator(lightning_ddp)\n\ntorch_distributed_function(max_time,duration)",
                    "name": "",
                    "command": [
                        "python"
                    ],
                    "env": [
                        {
                            "name": "NCCL_DEBUG",
                            "value": "INFO"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_min_nodes",
                            "value": "6"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_max_nodes",
                            "value": "6"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_node_rank",
                            "value": "1"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_nproc_per_node",
                            "value": "1"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_max_restarts",
                            "value": "1"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_start_method",
                            "value": "fork"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_rdzv_backend",
                            "value": "static"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_rdzv_endpoint_url",
                            "value": "lightning-ddp-0-6dfeb612-01b3-40f6-b40c-64eb9cc9eb6e.argo.svc.cluster.local"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_rdzv_endpoint_port",
                            "value": "29200"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_run_id",
                            "value": "1"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_tee",
                            "value": "0"
                        }
                    ],
                    "resources": {
                        "limits": {
                            "cpu": "700m",
                            "memory": "1Gi"
                        },
                        "requests": {
                            "cpu": "700m",
                            "memory": "1Gi"
                        }
                    },
                    "image_pull_policy": "Always"
                },
                "retry_strategy": {
                    "limit": "1",
                    "retry_policy": "OnError"
                },
                "pod_spec_patch": "topologySpreadConstraints:\n- maxSkew: 1\n  topologyKey: kubernetes.io/hostname\n  whenUnsatisfiable: DoNotSchedule\n  labelSelector:\n    matchExpressions:\n      - { key: torch-node, operator: In, values: ['0','1','2','3','4','5']}"
            },
            "namespaced/pipeline-test-lightning-cpu-pipeline-c8drk/lightning-ddp-2": {
                "name": "lightning-ddp-2",
                "inputs": {
                    "parameters": [
                        {
                            "name": "max_time",
                            "default": "00:00:00:30"
                        },
                        {
                            "name": "duration",
                            "default": "null"
                        }
                    ]
                },
                "outputs": {
                    "parameters": [
                        {
                            "name": "duration",
                            "value_from": {
                                "path": "duration"
                            }
                        }
                    ]
                },
                "metadata": {
                    "labels": {
                        "torch-job": "lightning-ddp-0-6dfeb612-01b3-40f6-b40c-64eb9cc9eb6e",
                        "torch-node": "2"
                    }
                },
                "script": {
                    "image": "bettmensch88/bettmensch.ai-lightning:3.11-latest",
                    "source": "import os\nimport sys\nsys.path.append(os.getcwd())\n\n# --- preprocessing\nimport json\ntry: max_time = json.loads(r'''{{inputs.parameters.max_time}}''')\nexcept: max_time = r'''{{inputs.parameters.max_time}}'''\n\nfrom bettmensch_ai.io import InputParameter\n\nfrom bettmensch_ai.io import OutputParameter\nduration = OutputParameter(\"duration\")\n\ndef lightning_ddp(max_time: InputParameter='00:00:00:30', duration: OutputParameter=None) -> None:\n    \"\"\"When decorated with the torch_component decorator, implements a\n    bettmensch_ai.TorchComponent that runs a torch DDP across pods and nodes in\n    your K8s cluster.\"\"\"\n    from datetime import datetime as dt\n    import lightning.pytorch as pl\n    import torch\n    from bettmensch_ai.components.torch_utils import LaunchConfigSettings\n    from lightning.pytorch.strategies import DDPStrategy\n    start = dt.now()\n\n    class ToyExample(pl.LightningModule):\n\n        def __init__(self, model):\n            super().__init__()\n            self.model = model\n\n        def training_step(self, batch):\n            loss = self.model(batch).sum()\n            return loss\n\n        def configure_optimizers(self):\n            return torch.optim.Adam(self.model.parameters())\n    model = torch.nn.Linear(32, 2)\n    pl_module = ToyExample(model)\n    train_dataloader = torch.utils.data.DataLoader(torch.randn(8, 32))\n    has_gpu = torch.cuda.is_available()\n    print(f'GPU present: {has_gpu}')\n    process_group_backend = 'nccl' if has_gpu else 'gloo'\n    accelerator = 'gpu' if has_gpu else 'cpu'\n    ddp = DDPStrategy(process_group_backend=process_group_backend)\n    launch_settings = LaunchConfigSettings()\n    trainer = pl.Trainer(strategy=ddp, accelerator=accelerator, num_nodes=launch_settings.max_nodes, devices=launch_settings.nproc_per_node, max_time=max_time)\n    trainer.fit(pl_module, train_dataloader)\n    if duration is not None:\n        duration.assign(dt.now() - start)\n\nfrom bettmensch_ai.components import torch_distribute\n\ntorch_distribute_decorator=torch_distribute()\ntorch_distributed_function=torch_distribute_decorator(lightning_ddp)\n\ntorch_distributed_function(max_time,duration)",
                    "name": "",
                    "command": [
                        "python"
                    ],
                    "env": [
                        {
                            "name": "NCCL_DEBUG",
                            "value": "INFO"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_min_nodes",
                            "value": "6"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_max_nodes",
                            "value": "6"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_node_rank",
                            "value": "2"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_nproc_per_node",
                            "value": "1"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_max_restarts",
                            "value": "1"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_start_method",
                            "value": "fork"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_rdzv_backend",
                            "value": "static"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_rdzv_endpoint_url",
                            "value": "lightning-ddp-0-6dfeb612-01b3-40f6-b40c-64eb9cc9eb6e.argo.svc.cluster.local"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_rdzv_endpoint_port",
                            "value": "29200"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_run_id",
                            "value": "1"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_tee",
                            "value": "0"
                        }
                    ],
                    "resources": {
                        "limits": {
                            "cpu": "700m",
                            "memory": "1Gi"
                        },
                        "requests": {
                            "cpu": "700m",
                            "memory": "1Gi"
                        }
                    },
                    "image_pull_policy": "Always"
                },
                "retry_strategy": {
                    "limit": "1",
                    "retry_policy": "OnError"
                },
                "pod_spec_patch": "topologySpreadConstraints:\n- maxSkew: 1\n  topologyKey: kubernetes.io/hostname\n  whenUnsatisfiable: DoNotSchedule\n  labelSelector:\n    matchExpressions:\n      - { key: torch-node, operator: In, values: ['0','1','2','3','4','5']}"
            },
            "namespaced/pipeline-test-lightning-cpu-pipeline-c8drk/lightning-ddp-3": {
                "name": "lightning-ddp-3",
                "inputs": {
                    "parameters": [
                        {
                            "name": "max_time",
                            "default": "00:00:00:30"
                        },
                        {
                            "name": "duration",
                            "default": "null"
                        }
                    ]
                },
                "outputs": {
                    "parameters": [
                        {
                            "name": "duration",
                            "value_from": {
                                "path": "duration"
                            }
                        }
                    ]
                },
                "metadata": {
                    "labels": {
                        "torch-job": "lightning-ddp-0-6dfeb612-01b3-40f6-b40c-64eb9cc9eb6e",
                        "torch-node": "3"
                    }
                },
                "script": {
                    "image": "bettmensch88/bettmensch.ai-lightning:3.11-latest",
                    "source": "import os\nimport sys\nsys.path.append(os.getcwd())\n\n# --- preprocessing\nimport json\ntry: max_time = json.loads(r'''{{inputs.parameters.max_time}}''')\nexcept: max_time = r'''{{inputs.parameters.max_time}}'''\n\nfrom bettmensch_ai.io import InputParameter\n\nfrom bettmensch_ai.io import OutputParameter\nduration = OutputParameter(\"duration\")\n\ndef lightning_ddp(max_time: InputParameter='00:00:00:30', duration: OutputParameter=None) -> None:\n    \"\"\"When decorated with the torch_component decorator, implements a\n    bettmensch_ai.TorchComponent that runs a torch DDP across pods and nodes in\n    your K8s cluster.\"\"\"\n    from datetime import datetime as dt\n    import lightning.pytorch as pl\n    import torch\n    from bettmensch_ai.components.torch_utils import LaunchConfigSettings\n    from lightning.pytorch.strategies import DDPStrategy\n    start = dt.now()\n\n    class ToyExample(pl.LightningModule):\n\n        def __init__(self, model):\n            super().__init__()\n            self.model = model\n\n        def training_step(self, batch):\n            loss = self.model(batch).sum()\n            return loss\n\n        def configure_optimizers(self):\n            return torch.optim.Adam(self.model.parameters())\n    model = torch.nn.Linear(32, 2)\n    pl_module = ToyExample(model)\n    train_dataloader = torch.utils.data.DataLoader(torch.randn(8, 32))\n    has_gpu = torch.cuda.is_available()\n    print(f'GPU present: {has_gpu}')\n    process_group_backend = 'nccl' if has_gpu else 'gloo'\n    accelerator = 'gpu' if has_gpu else 'cpu'\n    ddp = DDPStrategy(process_group_backend=process_group_backend)\n    launch_settings = LaunchConfigSettings()\n    trainer = pl.Trainer(strategy=ddp, accelerator=accelerator, num_nodes=launch_settings.max_nodes, devices=launch_settings.nproc_per_node, max_time=max_time)\n    trainer.fit(pl_module, train_dataloader)\n    if duration is not None:\n        duration.assign(dt.now() - start)\n\nfrom bettmensch_ai.components import torch_distribute\n\ntorch_distribute_decorator=torch_distribute()\ntorch_distributed_function=torch_distribute_decorator(lightning_ddp)\n\ntorch_distributed_function(max_time,duration)",
                    "name": "",
                    "command": [
                        "python"
                    ],
                    "env": [
                        {
                            "name": "NCCL_DEBUG",
                            "value": "INFO"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_min_nodes",
                            "value": "6"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_max_nodes",
                            "value": "6"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_node_rank",
                            "value": "3"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_nproc_per_node",
                            "value": "1"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_max_restarts",
                            "value": "1"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_start_method",
                            "value": "fork"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_rdzv_backend",
                            "value": "static"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_rdzv_endpoint_url",
                            "value": "lightning-ddp-0-6dfeb612-01b3-40f6-b40c-64eb9cc9eb6e.argo.svc.cluster.local"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_rdzv_endpoint_port",
                            "value": "29200"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_run_id",
                            "value": "1"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_tee",
                            "value": "0"
                        }
                    ],
                    "resources": {
                        "limits": {
                            "cpu": "700m",
                            "memory": "1Gi"
                        },
                        "requests": {
                            "cpu": "700m",
                            "memory": "1Gi"
                        }
                    },
                    "image_pull_policy": "Always"
                },
                "retry_strategy": {
                    "limit": "1",
                    "retry_policy": "OnError"
                },
                "pod_spec_patch": "topologySpreadConstraints:\n- maxSkew: 1\n  topologyKey: kubernetes.io/hostname\n  whenUnsatisfiable: DoNotSchedule\n  labelSelector:\n    matchExpressions:\n      - { key: torch-node, operator: In, values: ['0','1','2','3','4','5']}"
            },
            "namespaced/pipeline-test-lightning-cpu-pipeline-c8drk/lightning-ddp-4": {
                "name": "lightning-ddp-4",
                "inputs": {
                    "parameters": [
                        {
                            "name": "max_time",
                            "default": "00:00:00:30"
                        },
                        {
                            "name": "duration",
                            "default": "null"
                        }
                    ]
                },
                "outputs": {
                    "parameters": [
                        {
                            "name": "duration",
                            "value_from": {
                                "path": "duration"
                            }
                        }
                    ]
                },
                "metadata": {
                    "labels": {
                        "torch-job": "lightning-ddp-0-6dfeb612-01b3-40f6-b40c-64eb9cc9eb6e",
                        "torch-node": "4"
                    }
                },
                "script": {
                    "image": "bettmensch88/bettmensch.ai-lightning:3.11-latest",
                    "source": "import os\nimport sys\nsys.path.append(os.getcwd())\n\n# --- preprocessing\nimport json\ntry: max_time = json.loads(r'''{{inputs.parameters.max_time}}''')\nexcept: max_time = r'''{{inputs.parameters.max_time}}'''\n\nfrom bettmensch_ai.io import InputParameter\n\nfrom bettmensch_ai.io import OutputParameter\nduration = OutputParameter(\"duration\")\n\ndef lightning_ddp(max_time: InputParameter='00:00:00:30', duration: OutputParameter=None) -> None:\n    \"\"\"When decorated with the torch_component decorator, implements a\n    bettmensch_ai.TorchComponent that runs a torch DDP across pods and nodes in\n    your K8s cluster.\"\"\"\n    from datetime import datetime as dt\n    import lightning.pytorch as pl\n    import torch\n    from bettmensch_ai.components.torch_utils import LaunchConfigSettings\n    from lightning.pytorch.strategies import DDPStrategy\n    start = dt.now()\n\n    class ToyExample(pl.LightningModule):\n\n        def __init__(self, model):\n            super().__init__()\n            self.model = model\n\n        def training_step(self, batch):\n            loss = self.model(batch).sum()\n            return loss\n\n        def configure_optimizers(self):\n            return torch.optim.Adam(self.model.parameters())\n    model = torch.nn.Linear(32, 2)\n    pl_module = ToyExample(model)\n    train_dataloader = torch.utils.data.DataLoader(torch.randn(8, 32))\n    has_gpu = torch.cuda.is_available()\n    print(f'GPU present: {has_gpu}')\n    process_group_backend = 'nccl' if has_gpu else 'gloo'\n    accelerator = 'gpu' if has_gpu else 'cpu'\n    ddp = DDPStrategy(process_group_backend=process_group_backend)\n    launch_settings = LaunchConfigSettings()\n    trainer = pl.Trainer(strategy=ddp, accelerator=accelerator, num_nodes=launch_settings.max_nodes, devices=launch_settings.nproc_per_node, max_time=max_time)\n    trainer.fit(pl_module, train_dataloader)\n    if duration is not None:\n        duration.assign(dt.now() - start)\n\nfrom bettmensch_ai.components import torch_distribute\n\ntorch_distribute_decorator=torch_distribute()\ntorch_distributed_function=torch_distribute_decorator(lightning_ddp)\n\ntorch_distributed_function(max_time,duration)",
                    "name": "",
                    "command": [
                        "python"
                    ],
                    "env": [
                        {
                            "name": "NCCL_DEBUG",
                            "value": "INFO"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_min_nodes",
                            "value": "6"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_max_nodes",
                            "value": "6"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_node_rank",
                            "value": "4"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_nproc_per_node",
                            "value": "1"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_max_restarts",
                            "value": "1"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_start_method",
                            "value": "fork"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_rdzv_backend",
                            "value": "static"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_rdzv_endpoint_url",
                            "value": "lightning-ddp-0-6dfeb612-01b3-40f6-b40c-64eb9cc9eb6e.argo.svc.cluster.local"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_rdzv_endpoint_port",
                            "value": "29200"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_run_id",
                            "value": "1"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_tee",
                            "value": "0"
                        }
                    ],
                    "resources": {
                        "limits": {
                            "cpu": "700m",
                            "memory": "1Gi"
                        },
                        "requests": {
                            "cpu": "700m",
                            "memory": "1Gi"
                        }
                    },
                    "image_pull_policy": "Always"
                },
                "retry_strategy": {
                    "limit": "1",
                    "retry_policy": "OnError"
                },
                "pod_spec_patch": "topologySpreadConstraints:\n- maxSkew: 1\n  topologyKey: kubernetes.io/hostname\n  whenUnsatisfiable: DoNotSchedule\n  labelSelector:\n    matchExpressions:\n      - { key: torch-node, operator: In, values: ['0','1','2','3','4','5']}"
            },
            "namespaced/pipeline-test-lightning-cpu-pipeline-c8drk/lightning-ddp-5": {
                "name": "lightning-ddp-5",
                "inputs": {
                    "parameters": [
                        {
                            "name": "max_time",
                            "default": "00:00:00:30"
                        },
                        {
                            "name": "duration",
                            "default": "null"
                        }
                    ]
                },
                "outputs": {
                    "parameters": [
                        {
                            "name": "duration",
                            "value_from": {
                                "path": "duration"
                            }
                        }
                    ]
                },
                "metadata": {
                    "labels": {
                        "torch-job": "lightning-ddp-0-6dfeb612-01b3-40f6-b40c-64eb9cc9eb6e",
                        "torch-node": "5"
                    }
                },
                "script": {
                    "image": "bettmensch88/bettmensch.ai-lightning:3.11-latest",
                    "source": "import os\nimport sys\nsys.path.append(os.getcwd())\n\n# --- preprocessing\nimport json\ntry: max_time = json.loads(r'''{{inputs.parameters.max_time}}''')\nexcept: max_time = r'''{{inputs.parameters.max_time}}'''\n\nfrom bettmensch_ai.io import InputParameter\n\nfrom bettmensch_ai.io import OutputParameter\nduration = OutputParameter(\"duration\")\n\ndef lightning_ddp(max_time: InputParameter='00:00:00:30', duration: OutputParameter=None) -> None:\n    \"\"\"When decorated with the torch_component decorator, implements a\n    bettmensch_ai.TorchComponent that runs a torch DDP across pods and nodes in\n    your K8s cluster.\"\"\"\n    from datetime import datetime as dt\n    import lightning.pytorch as pl\n    import torch\n    from bettmensch_ai.components.torch_utils import LaunchConfigSettings\n    from lightning.pytorch.strategies import DDPStrategy\n    start = dt.now()\n\n    class ToyExample(pl.LightningModule):\n\n        def __init__(self, model):\n            super().__init__()\n            self.model = model\n\n        def training_step(self, batch):\n            loss = self.model(batch).sum()\n            return loss\n\n        def configure_optimizers(self):\n            return torch.optim.Adam(self.model.parameters())\n    model = torch.nn.Linear(32, 2)\n    pl_module = ToyExample(model)\n    train_dataloader = torch.utils.data.DataLoader(torch.randn(8, 32))\n    has_gpu = torch.cuda.is_available()\n    print(f'GPU present: {has_gpu}')\n    process_group_backend = 'nccl' if has_gpu else 'gloo'\n    accelerator = 'gpu' if has_gpu else 'cpu'\n    ddp = DDPStrategy(process_group_backend=process_group_backend)\n    launch_settings = LaunchConfigSettings()\n    trainer = pl.Trainer(strategy=ddp, accelerator=accelerator, num_nodes=launch_settings.max_nodes, devices=launch_settings.nproc_per_node, max_time=max_time)\n    trainer.fit(pl_module, train_dataloader)\n    if duration is not None:\n        duration.assign(dt.now() - start)\n\nfrom bettmensch_ai.components import torch_distribute\n\ntorch_distribute_decorator=torch_distribute()\ntorch_distributed_function=torch_distribute_decorator(lightning_ddp)\n\ntorch_distributed_function(max_time,duration)",
                    "name": "",
                    "command": [
                        "python"
                    ],
                    "env": [
                        {
                            "name": "NCCL_DEBUG",
                            "value": "INFO"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_min_nodes",
                            "value": "6"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_max_nodes",
                            "value": "6"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_node_rank",
                            "value": "5"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_nproc_per_node",
                            "value": "1"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_max_restarts",
                            "value": "1"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_start_method",
                            "value": "fork"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_rdzv_backend",
                            "value": "static"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_rdzv_endpoint_url",
                            "value": "lightning-ddp-0-6dfeb612-01b3-40f6-b40c-64eb9cc9eb6e.argo.svc.cluster.local"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_rdzv_endpoint_port",
                            "value": "29200"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_run_id",
                            "value": "1"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_tee",
                            "value": "0"
                        }
                    ],
                    "resources": {
                        "limits": {
                            "cpu": "700m",
                            "memory": "1Gi"
                        },
                        "requests": {
                            "cpu": "700m",
                            "memory": "1Gi"
                        }
                    },
                    "image_pull_policy": "Always"
                },
                "retry_strategy": {
                    "limit": "1",
                    "retry_policy": "OnError"
                },
                "pod_spec_patch": "topologySpreadConstraints:\n- maxSkew: 1\n  topologyKey: kubernetes.io/hostname\n  whenUnsatisfiable: DoNotSchedule\n  labelSelector:\n    matchExpressions:\n      - { key: torch-node, operator: In, values: ['0','1','2','3','4','5']}"
            },
            "namespaced/pipeline-test-lightning-cpu-pipeline-c8drk/lightning-ddp-create-torch-service": {
                "name": "lightning-ddp-create-torch-service",
                "inputs": {},
                "outputs": {},
                "metadata": {},
                "resource": {
                    "action": "create",
                    "manifest": "apiVersion: v1\nkind: Service\nmetadata:\n  name: lightning-ddp-0-6dfeb612-01b3-40f6-b40c-64eb9cc9eb6e\n  namespace: argo\n  labels:\n    app: lightning-ddp-0-6dfeb612-01b3-40f6-b40c-64eb9cc9eb6e\nspec:\n  clusterIP: None  # ClusterIP set to None for headless service.\n  ports:\n  - name: ddp  # Port for torchrun master<->worker node coms.\n    port: 29200\n    targetPort: 29200\n  selector:\n    torch-job: lightning-ddp-0-6dfeb612-01b3-40f6-b40c-64eb9cc9eb6e\n    torch-node: '0'  # Selector for pods associated with this service.\n"
                }
            },
            "namespaced/pipeline-test-lightning-cpu-pipeline-c8drk/lightning-ddp-delete-torch-service": {
                "name": "lightning-ddp-delete-torch-service",
                "inputs": {},
                "outputs": {},
                "metadata": {},
                "resource": {
                    "action": "delete",
                    "flags": [
                        "service",
                        "--selector",
                        "torch-job=lightning-ddp-0-6dfeb612-01b3-40f6-b40c-64eb9cc9eb6e",
                        "-n",
                        "argo"
                    ]
                }
            },
            "namespaced/pipeline-test-lightning-cpu-pipeline-c8drk/show-duration-param": {
                "name": "show-duration-param",
                "inputs": {
                    "parameters": [
                        {
                            "name": "a"
                        }
                    ]
                },
                "outputs": {},
                "metadata": {},
                "script": {
                    "image": "bettmensch88/bettmensch.ai:3.11-latest",
                    "source": "import os\nimport sys\nsys.path.append(os.getcwd())\n\n# --- preprocessing\nimport json\ntry: a = json.loads(r'''{{inputs.parameters.a}}''')\nexcept: a = r'''{{inputs.parameters.a}}'''\n\nfrom bettmensch_ai.io import InputParameter\n\ndef show_parameter(a: InputParameter) -> None:\n    \"\"\"When decorated with the bettmensch_ai.components.component decorator,\n    implements a bettmensch_ai.Component that prints the values of its\n    InputParameter.\"\"\"\n    print(f'Content of input parameter a is: {a}')\nshow_parameter(a)",
                    "name": "",
                    "command": [
                        "python"
                    ],
                    "resources": {
                        "limits": {
                            "cpu": "100m",
                            "memory": "100Mi"
                        },
                        "requests": {
                            "cpu": "100m",
                            "memory": "100Mi"
                        }
                    },
                    "image_pull_policy": "Always"
                },
                "retry_strategy": {
                    "limit": "1",
                    "retry_policy": "OnError"
                }
            }
        },
        "conditions": [
            {
                "type": "PodRunning",
                "status": "False"
            },
            {
                "type": "Completed",
                "status": "True"
            }
        ],
        "resources_duration": {
            "cpu": 235,
            "memory": 4168
        },
        "stored_workflow_template_spec": {
            "templates": [
                {
                    "name": "lightning-ddp-create-torch-service",
                    "inputs": {},
                    "outputs": {},
                    "metadata": {},
                    "resource": {
                        "action": "create",
                        "manifest": "apiVersion: v1\nkind: Service\nmetadata:\n  name: lightning-ddp-0-6dfeb612-01b3-40f6-b40c-64eb9cc9eb6e\n  namespace: argo\n  labels:\n    app: lightning-ddp-0-6dfeb612-01b3-40f6-b40c-64eb9cc9eb6e\nspec:\n  clusterIP: None  # ClusterIP set to None for headless service.\n  ports:\n  - name: ddp  # Port for torchrun master<->worker node coms.\n    port: 29200\n    targetPort: 29200\n  selector:\n    torch-job: lightning-ddp-0-6dfeb612-01b3-40f6-b40c-64eb9cc9eb6e\n    torch-node: '0'  # Selector for pods associated with this service.\n"
                    }
                },
                {
                    "name": "lightning-ddp-delete-torch-service",
                    "inputs": {},
                    "outputs": {},
                    "metadata": {},
                    "resource": {
                        "action": "delete",
                        "flags": [
                            "service",
                            "--selector",
                            "torch-job=lightning-ddp-0-6dfeb612-01b3-40f6-b40c-64eb9cc9eb6e",
                            "-n",
                            "argo"
                        ]
                    }
                },
                {
                    "name": "bettmensch-ai-dag",
                    "inputs": {},
                    "outputs": {},
                    "metadata": {},
                    "dag": {
                        "tasks": [
                            {
                                "name": "lightning-ddp-create-torch-service",
                                "template": "lightning-ddp-create-torch-service",
                                "arguments": {}
                            },
                            {
                                "name": "lightning-ddp-0",
                                "template": "lightning-ddp-0",
                                "arguments": {
                                    "parameters": [
                                        {
                                            "name": "max_time",
                                            "value": "{{workflow.parameters.max_time}}"
                                        }
                                    ]
                                },
                                "depends": "lightning-ddp-create-torch-service"
                            },
                            {
                                "name": "lightning-ddp-0-worker-1",
                                "template": "lightning-ddp-1",
                                "arguments": {
                                    "parameters": [
                                        {
                                            "name": "max_time",
                                            "value": "{{workflow.parameters.max_time}}"
                                        }
                                    ]
                                },
                                "depends": "lightning-ddp-create-torch-service"
                            },
                            {
                                "name": "lightning-ddp-0-worker-2",
                                "template": "lightning-ddp-2",
                                "arguments": {
                                    "parameters": [
                                        {
                                            "name": "max_time",
                                            "value": "{{workflow.parameters.max_time}}"
                                        }
                                    ]
                                },
                                "depends": "lightning-ddp-create-torch-service"
                            },
                            {
                                "name": "lightning-ddp-0-worker-3",
                                "template": "lightning-ddp-3",
                                "arguments": {
                                    "parameters": [
                                        {
                                            "name": "max_time",
                                            "value": "{{workflow.parameters.max_time}}"
                                        }
                                    ]
                                },
                                "depends": "lightning-ddp-create-torch-service"
                            },
                            {
                                "name": "lightning-ddp-0-worker-4",
                                "template": "lightning-ddp-4",
                                "arguments": {
                                    "parameters": [
                                        {
                                            "name": "max_time",
                                            "value": "{{workflow.parameters.max_time}}"
                                        }
                                    ]
                                },
                                "depends": "lightning-ddp-create-torch-service"
                            },
                            {
                                "name": "lightning-ddp-0-worker-5",
                                "template": "lightning-ddp-5",
                                "arguments": {
                                    "parameters": [
                                        {
                                            "name": "max_time",
                                            "value": "{{workflow.parameters.max_time}}"
                                        }
                                    ]
                                },
                                "depends": "lightning-ddp-create-torch-service"
                            },
                            {
                                "name": "lightning-ddp-delete-torch-service",
                                "template": "lightning-ddp-delete-torch-service",
                                "arguments": {},
                                "depends": "lightning-ddp-0"
                            },
                            {
                                "name": "show-duration-param-0",
                                "template": "show-duration-param",
                                "arguments": {
                                    "parameters": [
                                        {
                                            "name": "a",
                                            "value": "{{tasks.lightning-ddp-0.outputs.parameters.duration}}"
                                        }
                                    ]
                                },
                                "depends": "lightning-ddp-0"
                            }
                        ]
                    }
                },
                {
                    "name": "lightning-ddp-0",
                    "inputs": {
                        "parameters": [
                            {
                                "name": "max_time",
                                "default": "00:00:00:30"
                            },
                            {
                                "name": "duration",
                                "default": "null"
                            }
                        ]
                    },
                    "outputs": {
                        "parameters": [
                            {
                                "name": "duration",
                                "value_from": {
                                    "path": "duration"
                                }
                            }
                        ]
                    },
                    "metadata": {
                        "labels": {
                            "torch-job": "lightning-ddp-0-6dfeb612-01b3-40f6-b40c-64eb9cc9eb6e",
                            "torch-node": "0"
                        }
                    },
                    "script": {
                        "image": "bettmensch88/bettmensch.ai-lightning:3.11-latest",
                        "source": "import os\nimport sys\nsys.path.append(os.getcwd())\n\n# --- preprocessing\nimport json\ntry: max_time = json.loads(r'''{{inputs.parameters.max_time}}''')\nexcept: max_time = r'''{{inputs.parameters.max_time}}'''\n\nfrom bettmensch_ai.io import InputParameter\n\nfrom bettmensch_ai.io import OutputParameter\nduration = OutputParameter(\"duration\")\n\ndef lightning_ddp(max_time: InputParameter='00:00:00:30', duration: OutputParameter=None) -> None:\n    \"\"\"When decorated with the torch_component decorator, implements a\n    bettmensch_ai.TorchComponent that runs a torch DDP across pods and nodes in\n    your K8s cluster.\"\"\"\n    from datetime import datetime as dt\n    import lightning.pytorch as pl\n    import torch\n    from bettmensch_ai.components.torch_utils import LaunchConfigSettings\n    from lightning.pytorch.strategies import DDPStrategy\n    start = dt.now()\n\n    class ToyExample(pl.LightningModule):\n\n        def __init__(self, model):\n            super().__init__()\n            self.model = model\n\n        def training_step(self, batch):\n            loss = self.model(batch).sum()\n            return loss\n\n        def configure_optimizers(self):\n            return torch.optim.Adam(self.model.parameters())\n    model = torch.nn.Linear(32, 2)\n    pl_module = ToyExample(model)\n    train_dataloader = torch.utils.data.DataLoader(torch.randn(8, 32))\n    has_gpu = torch.cuda.is_available()\n    print(f'GPU present: {has_gpu}')\n    process_group_backend = 'nccl' if has_gpu else 'gloo'\n    accelerator = 'gpu' if has_gpu else 'cpu'\n    ddp = DDPStrategy(process_group_backend=process_group_backend)\n    launch_settings = LaunchConfigSettings()\n    trainer = pl.Trainer(strategy=ddp, accelerator=accelerator, num_nodes=launch_settings.max_nodes, devices=launch_settings.nproc_per_node, max_time=max_time)\n    trainer.fit(pl_module, train_dataloader)\n    if duration is not None:\n        duration.assign(dt.now() - start)\n\nfrom bettmensch_ai.components import torch_distribute\n\ntorch_distribute_decorator=torch_distribute()\ntorch_distributed_function=torch_distribute_decorator(lightning_ddp)\n\ntorch_distributed_function(max_time,duration)",
                        "name": "",
                        "command": [
                            "python"
                        ],
                        "ports": [
                            {
                                "container_port": 29200,
                                "name": "ddp",
                                "protocol": "TCP"
                            }
                        ],
                        "env": [
                            {
                                "name": "NCCL_DEBUG",
                                "value": "INFO"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_min_nodes",
                                "value": "6"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_max_nodes",
                                "value": "6"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_node_rank",
                                "value": "0"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_nproc_per_node",
                                "value": "1"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_max_restarts",
                                "value": "1"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_start_method",
                                "value": "fork"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_rdzv_backend",
                                "value": "static"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_rdzv_endpoint_url",
                                "value": "lightning-ddp-0-6dfeb612-01b3-40f6-b40c-64eb9cc9eb6e.argo.svc.cluster.local"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_rdzv_endpoint_port",
                                "value": "29200"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_run_id",
                                "value": "1"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_tee",
                                "value": "0"
                            }
                        ],
                        "resources": {
                            "limits": {
                                "cpu": "700m",
                                "memory": "1Gi"
                            },
                            "requests": {
                                "cpu": "700m",
                                "memory": "1Gi"
                            }
                        },
                        "image_pull_policy": "Always"
                    },
                    "retry_strategy": {
                        "limit": "1",
                        "retry_policy": "OnError"
                    },
                    "pod_spec_patch": "topologySpreadConstraints:\n- maxSkew: 1\n  topologyKey: kubernetes.io/hostname\n  whenUnsatisfiable: DoNotSchedule\n  labelSelector:\n    matchExpressions:\n      - { key: torch-node, operator: In, values: ['0','1','2','3','4','5']}"
                },
                {
                    "name": "lightning-ddp-1",
                    "inputs": {
                        "parameters": [
                            {
                                "name": "max_time",
                                "default": "00:00:00:30"
                            },
                            {
                                "name": "duration",
                                "default": "null"
                            }
                        ]
                    },
                    "outputs": {
                        "parameters": [
                            {
                                "name": "duration",
                                "value_from": {
                                    "path": "duration"
                                }
                            }
                        ]
                    },
                    "metadata": {
                        "labels": {
                            "torch-job": "lightning-ddp-0-6dfeb612-01b3-40f6-b40c-64eb9cc9eb6e",
                            "torch-node": "1"
                        }
                    },
                    "script": {
                        "image": "bettmensch88/bettmensch.ai-lightning:3.11-latest",
                        "source": "import os\nimport sys\nsys.path.append(os.getcwd())\n\n# --- preprocessing\nimport json\ntry: max_time = json.loads(r'''{{inputs.parameters.max_time}}''')\nexcept: max_time = r'''{{inputs.parameters.max_time}}'''\n\nfrom bettmensch_ai.io import InputParameter\n\nfrom bettmensch_ai.io import OutputParameter\nduration = OutputParameter(\"duration\")\n\ndef lightning_ddp(max_time: InputParameter='00:00:00:30', duration: OutputParameter=None) -> None:\n    \"\"\"When decorated with the torch_component decorator, implements a\n    bettmensch_ai.TorchComponent that runs a torch DDP across pods and nodes in\n    your K8s cluster.\"\"\"\n    from datetime import datetime as dt\n    import lightning.pytorch as pl\n    import torch\n    from bettmensch_ai.components.torch_utils import LaunchConfigSettings\n    from lightning.pytorch.strategies import DDPStrategy\n    start = dt.now()\n\n    class ToyExample(pl.LightningModule):\n\n        def __init__(self, model):\n            super().__init__()\n            self.model = model\n\n        def training_step(self, batch):\n            loss = self.model(batch).sum()\n            return loss\n\n        def configure_optimizers(self):\n            return torch.optim.Adam(self.model.parameters())\n    model = torch.nn.Linear(32, 2)\n    pl_module = ToyExample(model)\n    train_dataloader = torch.utils.data.DataLoader(torch.randn(8, 32))\n    has_gpu = torch.cuda.is_available()\n    print(f'GPU present: {has_gpu}')\n    process_group_backend = 'nccl' if has_gpu else 'gloo'\n    accelerator = 'gpu' if has_gpu else 'cpu'\n    ddp = DDPStrategy(process_group_backend=process_group_backend)\n    launch_settings = LaunchConfigSettings()\n    trainer = pl.Trainer(strategy=ddp, accelerator=accelerator, num_nodes=launch_settings.max_nodes, devices=launch_settings.nproc_per_node, max_time=max_time)\n    trainer.fit(pl_module, train_dataloader)\n    if duration is not None:\n        duration.assign(dt.now() - start)\n\nfrom bettmensch_ai.components import torch_distribute\n\ntorch_distribute_decorator=torch_distribute()\ntorch_distributed_function=torch_distribute_decorator(lightning_ddp)\n\ntorch_distributed_function(max_time,duration)",
                        "name": "",
                        "command": [
                            "python"
                        ],
                        "env": [
                            {
                                "name": "NCCL_DEBUG",
                                "value": "INFO"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_min_nodes",
                                "value": "6"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_max_nodes",
                                "value": "6"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_node_rank",
                                "value": "1"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_nproc_per_node",
                                "value": "1"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_max_restarts",
                                "value": "1"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_start_method",
                                "value": "fork"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_rdzv_backend",
                                "value": "static"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_rdzv_endpoint_url",
                                "value": "lightning-ddp-0-6dfeb612-01b3-40f6-b40c-64eb9cc9eb6e.argo.svc.cluster.local"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_rdzv_endpoint_port",
                                "value": "29200"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_run_id",
                                "value": "1"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_tee",
                                "value": "0"
                            }
                        ],
                        "resources": {
                            "limits": {
                                "cpu": "700m",
                                "memory": "1Gi"
                            },
                            "requests": {
                                "cpu": "700m",
                                "memory": "1Gi"
                            }
                        },
                        "image_pull_policy": "Always"
                    },
                    "retry_strategy": {
                        "limit": "1",
                        "retry_policy": "OnError"
                    },
                    "pod_spec_patch": "topologySpreadConstraints:\n- maxSkew: 1\n  topologyKey: kubernetes.io/hostname\n  whenUnsatisfiable: DoNotSchedule\n  labelSelector:\n    matchExpressions:\n      - { key: torch-node, operator: In, values: ['0','1','2','3','4','5']}"
                },
                {
                    "name": "lightning-ddp-2",
                    "inputs": {
                        "parameters": [
                            {
                                "name": "max_time",
                                "default": "00:00:00:30"
                            },
                            {
                                "name": "duration",
                                "default": "null"
                            }
                        ]
                    },
                    "outputs": {
                        "parameters": [
                            {
                                "name": "duration",
                                "value_from": {
                                    "path": "duration"
                                }
                            }
                        ]
                    },
                    "metadata": {
                        "labels": {
                            "torch-job": "lightning-ddp-0-6dfeb612-01b3-40f6-b40c-64eb9cc9eb6e",
                            "torch-node": "2"
                        }
                    },
                    "script": {
                        "image": "bettmensch88/bettmensch.ai-lightning:3.11-latest",
                        "source": "import os\nimport sys\nsys.path.append(os.getcwd())\n\n# --- preprocessing\nimport json\ntry: max_time = json.loads(r'''{{inputs.parameters.max_time}}''')\nexcept: max_time = r'''{{inputs.parameters.max_time}}'''\n\nfrom bettmensch_ai.io import InputParameter\n\nfrom bettmensch_ai.io import OutputParameter\nduration = OutputParameter(\"duration\")\n\ndef lightning_ddp(max_time: InputParameter='00:00:00:30', duration: OutputParameter=None) -> None:\n    \"\"\"When decorated with the torch_component decorator, implements a\n    bettmensch_ai.TorchComponent that runs a torch DDP across pods and nodes in\n    your K8s cluster.\"\"\"\n    from datetime import datetime as dt\n    import lightning.pytorch as pl\n    import torch\n    from bettmensch_ai.components.torch_utils import LaunchConfigSettings\n    from lightning.pytorch.strategies import DDPStrategy\n    start = dt.now()\n\n    class ToyExample(pl.LightningModule):\n\n        def __init__(self, model):\n            super().__init__()\n            self.model = model\n\n        def training_step(self, batch):\n            loss = self.model(batch).sum()\n            return loss\n\n        def configure_optimizers(self):\n            return torch.optim.Adam(self.model.parameters())\n    model = torch.nn.Linear(32, 2)\n    pl_module = ToyExample(model)\n    train_dataloader = torch.utils.data.DataLoader(torch.randn(8, 32))\n    has_gpu = torch.cuda.is_available()\n    print(f'GPU present: {has_gpu}')\n    process_group_backend = 'nccl' if has_gpu else 'gloo'\n    accelerator = 'gpu' if has_gpu else 'cpu'\n    ddp = DDPStrategy(process_group_backend=process_group_backend)\n    launch_settings = LaunchConfigSettings()\n    trainer = pl.Trainer(strategy=ddp, accelerator=accelerator, num_nodes=launch_settings.max_nodes, devices=launch_settings.nproc_per_node, max_time=max_time)\n    trainer.fit(pl_module, train_dataloader)\n    if duration is not None:\n        duration.assign(dt.now() - start)\n\nfrom bettmensch_ai.components import torch_distribute\n\ntorch_distribute_decorator=torch_distribute()\ntorch_distributed_function=torch_distribute_decorator(lightning_ddp)\n\ntorch_distributed_function(max_time,duration)",
                        "name": "",
                        "command": [
                            "python"
                        ],
                        "env": [
                            {
                                "name": "NCCL_DEBUG",
                                "value": "INFO"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_min_nodes",
                                "value": "6"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_max_nodes",
                                "value": "6"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_node_rank",
                                "value": "2"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_nproc_per_node",
                                "value": "1"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_max_restarts",
                                "value": "1"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_start_method",
                                "value": "fork"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_rdzv_backend",
                                "value": "static"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_rdzv_endpoint_url",
                                "value": "lightning-ddp-0-6dfeb612-01b3-40f6-b40c-64eb9cc9eb6e.argo.svc.cluster.local"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_rdzv_endpoint_port",
                                "value": "29200"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_run_id",
                                "value": "1"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_tee",
                                "value": "0"
                            }
                        ],
                        "resources": {
                            "limits": {
                                "cpu": "700m",
                                "memory": "1Gi"
                            },
                            "requests": {
                                "cpu": "700m",
                                "memory": "1Gi"
                            }
                        },
                        "image_pull_policy": "Always"
                    },
                    "retry_strategy": {
                        "limit": "1",
                        "retry_policy": "OnError"
                    },
                    "pod_spec_patch": "topologySpreadConstraints:\n- maxSkew: 1\n  topologyKey: kubernetes.io/hostname\n  whenUnsatisfiable: DoNotSchedule\n  labelSelector:\n    matchExpressions:\n      - { key: torch-node, operator: In, values: ['0','1','2','3','4','5']}"
                },
                {
                    "name": "lightning-ddp-3",
                    "inputs": {
                        "parameters": [
                            {
                                "name": "max_time",
                                "default": "00:00:00:30"
                            },
                            {
                                "name": "duration",
                                "default": "null"
                            }
                        ]
                    },
                    "outputs": {
                        "parameters": [
                            {
                                "name": "duration",
                                "value_from": {
                                    "path": "duration"
                                }
                            }
                        ]
                    },
                    "metadata": {
                        "labels": {
                            "torch-job": "lightning-ddp-0-6dfeb612-01b3-40f6-b40c-64eb9cc9eb6e",
                            "torch-node": "3"
                        }
                    },
                    "script": {
                        "image": "bettmensch88/bettmensch.ai-lightning:3.11-latest",
                        "source": "import os\nimport sys\nsys.path.append(os.getcwd())\n\n# --- preprocessing\nimport json\ntry: max_time = json.loads(r'''{{inputs.parameters.max_time}}''')\nexcept: max_time = r'''{{inputs.parameters.max_time}}'''\n\nfrom bettmensch_ai.io import InputParameter\n\nfrom bettmensch_ai.io import OutputParameter\nduration = OutputParameter(\"duration\")\n\ndef lightning_ddp(max_time: InputParameter='00:00:00:30', duration: OutputParameter=None) -> None:\n    \"\"\"When decorated with the torch_component decorator, implements a\n    bettmensch_ai.TorchComponent that runs a torch DDP across pods and nodes in\n    your K8s cluster.\"\"\"\n    from datetime import datetime as dt\n    import lightning.pytorch as pl\n    import torch\n    from bettmensch_ai.components.torch_utils import LaunchConfigSettings\n    from lightning.pytorch.strategies import DDPStrategy\n    start = dt.now()\n\n    class ToyExample(pl.LightningModule):\n\n        def __init__(self, model):\n            super().__init__()\n            self.model = model\n\n        def training_step(self, batch):\n            loss = self.model(batch).sum()\n            return loss\n\n        def configure_optimizers(self):\n            return torch.optim.Adam(self.model.parameters())\n    model = torch.nn.Linear(32, 2)\n    pl_module = ToyExample(model)\n    train_dataloader = torch.utils.data.DataLoader(torch.randn(8, 32))\n    has_gpu = torch.cuda.is_available()\n    print(f'GPU present: {has_gpu}')\n    process_group_backend = 'nccl' if has_gpu else 'gloo'\n    accelerator = 'gpu' if has_gpu else 'cpu'\n    ddp = DDPStrategy(process_group_backend=process_group_backend)\n    launch_settings = LaunchConfigSettings()\n    trainer = pl.Trainer(strategy=ddp, accelerator=accelerator, num_nodes=launch_settings.max_nodes, devices=launch_settings.nproc_per_node, max_time=max_time)\n    trainer.fit(pl_module, train_dataloader)\n    if duration is not None:\n        duration.assign(dt.now() - start)\n\nfrom bettmensch_ai.components import torch_distribute\n\ntorch_distribute_decorator=torch_distribute()\ntorch_distributed_function=torch_distribute_decorator(lightning_ddp)\n\ntorch_distributed_function(max_time,duration)",
                        "name": "",
                        "command": [
                            "python"
                        ],
                        "env": [
                            {
                                "name": "NCCL_DEBUG",
                                "value": "INFO"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_min_nodes",
                                "value": "6"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_max_nodes",
                                "value": "6"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_node_rank",
                                "value": "3"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_nproc_per_node",
                                "value": "1"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_max_restarts",
                                "value": "1"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_start_method",
                                "value": "fork"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_rdzv_backend",
                                "value": "static"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_rdzv_endpoint_url",
                                "value": "lightning-ddp-0-6dfeb612-01b3-40f6-b40c-64eb9cc9eb6e.argo.svc.cluster.local"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_rdzv_endpoint_port",
                                "value": "29200"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_run_id",
                                "value": "1"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_tee",
                                "value": "0"
                            }
                        ],
                        "resources": {
                            "limits": {
                                "cpu": "700m",
                                "memory": "1Gi"
                            },
                            "requests": {
                                "cpu": "700m",
                                "memory": "1Gi"
                            }
                        },
                        "image_pull_policy": "Always"
                    },
                    "retry_strategy": {
                        "limit": "1",
                        "retry_policy": "OnError"
                    },
                    "pod_spec_patch": "topologySpreadConstraints:\n- maxSkew: 1\n  topologyKey: kubernetes.io/hostname\n  whenUnsatisfiable: DoNotSchedule\n  labelSelector:\n    matchExpressions:\n      - { key: torch-node, operator: In, values: ['0','1','2','3','4','5']}"
                },
                {
                    "name": "lightning-ddp-4",
                    "inputs": {
                        "parameters": [
                            {
                                "name": "max_time",
                                "default": "00:00:00:30"
                            },
                            {
                                "name": "duration",
                                "default": "null"
                            }
                        ]
                    },
                    "outputs": {
                        "parameters": [
                            {
                                "name": "duration",
                                "value_from": {
                                    "path": "duration"
                                }
                            }
                        ]
                    },
                    "metadata": {
                        "labels": {
                            "torch-job": "lightning-ddp-0-6dfeb612-01b3-40f6-b40c-64eb9cc9eb6e",
                            "torch-node": "4"
                        }
                    },
                    "script": {
                        "image": "bettmensch88/bettmensch.ai-lightning:3.11-latest",
                        "source": "import os\nimport sys\nsys.path.append(os.getcwd())\n\n# --- preprocessing\nimport json\ntry: max_time = json.loads(r'''{{inputs.parameters.max_time}}''')\nexcept: max_time = r'''{{inputs.parameters.max_time}}'''\n\nfrom bettmensch_ai.io import InputParameter\n\nfrom bettmensch_ai.io import OutputParameter\nduration = OutputParameter(\"duration\")\n\ndef lightning_ddp(max_time: InputParameter='00:00:00:30', duration: OutputParameter=None) -> None:\n    \"\"\"When decorated with the torch_component decorator, implements a\n    bettmensch_ai.TorchComponent that runs a torch DDP across pods and nodes in\n    your K8s cluster.\"\"\"\n    from datetime import datetime as dt\n    import lightning.pytorch as pl\n    import torch\n    from bettmensch_ai.components.torch_utils import LaunchConfigSettings\n    from lightning.pytorch.strategies import DDPStrategy\n    start = dt.now()\n\n    class ToyExample(pl.LightningModule):\n\n        def __init__(self, model):\n            super().__init__()\n            self.model = model\n\n        def training_step(self, batch):\n            loss = self.model(batch).sum()\n            return loss\n\n        def configure_optimizers(self):\n            return torch.optim.Adam(self.model.parameters())\n    model = torch.nn.Linear(32, 2)\n    pl_module = ToyExample(model)\n    train_dataloader = torch.utils.data.DataLoader(torch.randn(8, 32))\n    has_gpu = torch.cuda.is_available()\n    print(f'GPU present: {has_gpu}')\n    process_group_backend = 'nccl' if has_gpu else 'gloo'\n    accelerator = 'gpu' if has_gpu else 'cpu'\n    ddp = DDPStrategy(process_group_backend=process_group_backend)\n    launch_settings = LaunchConfigSettings()\n    trainer = pl.Trainer(strategy=ddp, accelerator=accelerator, num_nodes=launch_settings.max_nodes, devices=launch_settings.nproc_per_node, max_time=max_time)\n    trainer.fit(pl_module, train_dataloader)\n    if duration is not None:\n        duration.assign(dt.now() - start)\n\nfrom bettmensch_ai.components import torch_distribute\n\ntorch_distribute_decorator=torch_distribute()\ntorch_distributed_function=torch_distribute_decorator(lightning_ddp)\n\ntorch_distributed_function(max_time,duration)",
                        "name": "",
                        "command": [
                            "python"
                        ],
                        "env": [
                            {
                                "name": "NCCL_DEBUG",
                                "value": "INFO"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_min_nodes",
                                "value": "6"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_max_nodes",
                                "value": "6"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_node_rank",
                                "value": "4"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_nproc_per_node",
                                "value": "1"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_max_restarts",
                                "value": "1"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_start_method",
                                "value": "fork"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_rdzv_backend",
                                "value": "static"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_rdzv_endpoint_url",
                                "value": "lightning-ddp-0-6dfeb612-01b3-40f6-b40c-64eb9cc9eb6e.argo.svc.cluster.local"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_rdzv_endpoint_port",
                                "value": "29200"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_run_id",
                                "value": "1"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_tee",
                                "value": "0"
                            }
                        ],
                        "resources": {
                            "limits": {
                                "cpu": "700m",
                                "memory": "1Gi"
                            },
                            "requests": {
                                "cpu": "700m",
                                "memory": "1Gi"
                            }
                        },
                        "image_pull_policy": "Always"
                    },
                    "retry_strategy": {
                        "limit": "1",
                        "retry_policy": "OnError"
                    },
                    "pod_spec_patch": "topologySpreadConstraints:\n- maxSkew: 1\n  topologyKey: kubernetes.io/hostname\n  whenUnsatisfiable: DoNotSchedule\n  labelSelector:\n    matchExpressions:\n      - { key: torch-node, operator: In, values: ['0','1','2','3','4','5']}"
                },
                {
                    "name": "lightning-ddp-5",
                    "inputs": {
                        "parameters": [
                            {
                                "name": "max_time",
                                "default": "00:00:00:30"
                            },
                            {
                                "name": "duration",
                                "default": "null"
                            }
                        ]
                    },
                    "outputs": {
                        "parameters": [
                            {
                                "name": "duration",
                                "value_from": {
                                    "path": "duration"
                                }
                            }
                        ]
                    },
                    "metadata": {
                        "labels": {
                            "torch-job": "lightning-ddp-0-6dfeb612-01b3-40f6-b40c-64eb9cc9eb6e",
                            "torch-node": "5"
                        }
                    },
                    "script": {
                        "image": "bettmensch88/bettmensch.ai-lightning:3.11-latest",
                        "source": "import os\nimport sys\nsys.path.append(os.getcwd())\n\n# --- preprocessing\nimport json\ntry: max_time = json.loads(r'''{{inputs.parameters.max_time}}''')\nexcept: max_time = r'''{{inputs.parameters.max_time}}'''\n\nfrom bettmensch_ai.io import InputParameter\n\nfrom bettmensch_ai.io import OutputParameter\nduration = OutputParameter(\"duration\")\n\ndef lightning_ddp(max_time: InputParameter='00:00:00:30', duration: OutputParameter=None) -> None:\n    \"\"\"When decorated with the torch_component decorator, implements a\n    bettmensch_ai.TorchComponent that runs a torch DDP across pods and nodes in\n    your K8s cluster.\"\"\"\n    from datetime import datetime as dt\n    import lightning.pytorch as pl\n    import torch\n    from bettmensch_ai.components.torch_utils import LaunchConfigSettings\n    from lightning.pytorch.strategies import DDPStrategy\n    start = dt.now()\n\n    class ToyExample(pl.LightningModule):\n\n        def __init__(self, model):\n            super().__init__()\n            self.model = model\n\n        def training_step(self, batch):\n            loss = self.model(batch).sum()\n            return loss\n\n        def configure_optimizers(self):\n            return torch.optim.Adam(self.model.parameters())\n    model = torch.nn.Linear(32, 2)\n    pl_module = ToyExample(model)\n    train_dataloader = torch.utils.data.DataLoader(torch.randn(8, 32))\n    has_gpu = torch.cuda.is_available()\n    print(f'GPU present: {has_gpu}')\n    process_group_backend = 'nccl' if has_gpu else 'gloo'\n    accelerator = 'gpu' if has_gpu else 'cpu'\n    ddp = DDPStrategy(process_group_backend=process_group_backend)\n    launch_settings = LaunchConfigSettings()\n    trainer = pl.Trainer(strategy=ddp, accelerator=accelerator, num_nodes=launch_settings.max_nodes, devices=launch_settings.nproc_per_node, max_time=max_time)\n    trainer.fit(pl_module, train_dataloader)\n    if duration is not None:\n        duration.assign(dt.now() - start)\n\nfrom bettmensch_ai.components import torch_distribute\n\ntorch_distribute_decorator=torch_distribute()\ntorch_distributed_function=torch_distribute_decorator(lightning_ddp)\n\ntorch_distributed_function(max_time,duration)",
                        "name": "",
                        "command": [
                            "python"
                        ],
                        "env": [
                            {
                                "name": "NCCL_DEBUG",
                                "value": "INFO"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_min_nodes",
                                "value": "6"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_max_nodes",
                                "value": "6"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_node_rank",
                                "value": "5"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_nproc_per_node",
                                "value": "1"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_max_restarts",
                                "value": "1"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_start_method",
                                "value": "fork"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_rdzv_backend",
                                "value": "static"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_rdzv_endpoint_url",
                                "value": "lightning-ddp-0-6dfeb612-01b3-40f6-b40c-64eb9cc9eb6e.argo.svc.cluster.local"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_rdzv_endpoint_port",
                                "value": "29200"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_run_id",
                                "value": "1"
                            },
                            {
                                "name": "bettmensch_ai_distributed_torch_tee",
                                "value": "0"
                            }
                        ],
                        "resources": {
                            "limits": {
                                "cpu": "700m",
                                "memory": "1Gi"
                            },
                            "requests": {
                                "cpu": "700m",
                                "memory": "1Gi"
                            }
                        },
                        "image_pull_policy": "Always"
                    },
                    "retry_strategy": {
                        "limit": "1",
                        "retry_policy": "OnError"
                    },
                    "pod_spec_patch": "topologySpreadConstraints:\n- maxSkew: 1\n  topologyKey: kubernetes.io/hostname\n  whenUnsatisfiable: DoNotSchedule\n  labelSelector:\n    matchExpressions:\n      - { key: torch-node, operator: In, values: ['0','1','2','3','4','5']}"
                },
                {
                    "name": "show-duration-param",
                    "inputs": {
                        "parameters": [
                            {
                                "name": "a"
                            }
                        ]
                    },
                    "outputs": {},
                    "metadata": {},
                    "script": {
                        "image": "bettmensch88/bettmensch.ai:3.11-latest",
                        "source": "import os\nimport sys\nsys.path.append(os.getcwd())\n\n# --- preprocessing\nimport json\ntry: a = json.loads(r'''{{inputs.parameters.a}}''')\nexcept: a = r'''{{inputs.parameters.a}}'''\n\nfrom bettmensch_ai.io import InputParameter\n\ndef show_parameter(a: InputParameter) -> None:\n    \"\"\"When decorated with the bettmensch_ai.components.component decorator,\n    implements a bettmensch_ai.Component that prints the values of its\n    InputParameter.\"\"\"\n    print(f'Content of input parameter a is: {a}')\nshow_parameter(a)",
                        "name": "",
                        "command": [
                            "python"
                        ],
                        "resources": {
                            "limits": {
                                "cpu": "100m",
                                "memory": "100Mi"
                            },
                            "requests": {
                                "cpu": "100m",
                                "memory": "100Mi"
                            }
                        },
                        "image_pull_policy": "Always"
                    },
                    "retry_strategy": {
                        "limit": "1",
                        "retry_policy": "OnError"
                    }
                }
            ],
            "entrypoint": "bettmensch-ai-dag",
            "arguments": {
                "parameters": [
                    {
                        "name": "max_time",
                        "value": "00:00:00:20"
                    }
                ]
            },
            "service_account_name": "argo-workflow",
            "workflow_template_ref": {
                "name": "pipeline-test-lightning-cpu-pipeline-c8drk"
            }
        },
        "artifact_repository_ref": {
            "config_map": "artifact-repositories",
            "key": "bettmensch-ai-artifact-repository",
            "namespace": "argo",
            "artifact_repository": {
                "s3": {
                    "endpoint": "s3.us-east-2.amazonaws.com",
                    "bucket": "bettmensch-ai-artifact-repository",
                    "insecure": true
                }
            }
        },
        "artifact_gc_status": {
            "not_specified": true
        },
        "task_results_completion_status": {
            "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-1557279593": true,
            "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-2520177762": true,
            "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-3039208291": true,
            "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-3550627230": true,
            "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-3551413979": true,
            "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-3659131042": true,
            "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-3979811449": true,
            "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-4212313871": true,
            "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-888842340": true,
            "pipeline-test-lightning-cpu-pipeline-c8drk-flow-5v7qq-934355678": true
        }
    }
}
{
    "metadata": {
        "name": "pipeline-test-torch-gpu-pipeline-dcfq8",
        "generate_name": "pipeline-test-torch-gpu-pipeline-",
        "namespace": "argo",
        "uid": "1527e48c-6646-4cc4-8a54-edd274467a44",
        "resource_version": "11645",
        "generation": 1,
        "creation_timestamp": "test-datetime-value",
        "labels": {
            "workflows.argoproj.io/creator": "system-serviceaccount-argo-argo-server"
        },
        "managed_fields": [
            {
                "manager": "argo",
                "operation": "Update",
                "api_version": "argoproj.io/v1alpha1",
                "time": "test-datetime-value",
                "fields_type": "FieldsV1",
                "fields_v1": {
                    "f:metadata": {
                        "f:generateName": {},
                        "f:labels": {
                            ".": {},
                            "f:workflows.argoproj.io/creator": {}
                        }
                    },
                    "f:spec": {}
                }
            }
        ]
    },
    "spec": {
        "templates": [
            {
                "name": "torch-ddp-create-torch-service",
                "inputs": {},
                "outputs": {},
                "metadata": {},
                "resource": {
                    "action": "create",
                    "manifest": "apiVersion: v1\nkind: Service\nmetadata:\n  name: torch-ddp-0-c3ee0689-7a0b-4be4-8754-a019d7030eb6\n  namespace: argo\n  labels:\n    app: torch-ddp-0-c3ee0689-7a0b-4be4-8754-a019d7030eb6\nspec:\n  clusterIP: None  # ClusterIP set to None for headless service.\n  ports:\n  - name: ddp  # Port for torchrun master<->worker node coms.\n    port: 29200\n    targetPort: 29200\n  selector:\n    torch-job: torch-ddp-0-c3ee0689-7a0b-4be4-8754-a019d7030eb6\n    torch-node: '0'  # Selector for pods associated with this service.\n"
                }
            },
            {
                "name": "torch-ddp-delete-torch-service",
                "inputs": {},
                "outputs": {},
                "metadata": {},
                "resource": {
                    "action": "delete",
                    "flags": [
                        "service",
                        "--selector",
                        "torch-job=torch-ddp-0-c3ee0689-7a0b-4be4-8754-a019d7030eb6",
                        "-n",
                        "argo"
                    ]
                }
            },
            {
                "name": "bettmensch-ai-dag",
                "inputs": {},
                "outputs": {},
                "metadata": {},
                "dag": {
                    "tasks": [
                        {
                            "name": "torch-ddp-create-torch-service",
                            "template": "torch-ddp-create-torch-service",
                            "arguments": {}
                        },
                        {
                            "name": "torch-ddp-0",
                            "template": "torch-ddp-0",
                            "arguments": {
                                "parameters": [
                                    {
                                        "name": "n_iter",
                                        "value": "{{workflow.parameters.n_iter}}"
                                    },
                                    {
                                        "name": "n_seconds_sleep",
                                        "value": "{{workflow.parameters.n_seconds_sleep}}"
                                    }
                                ]
                            },
                            "depends": "torch-ddp-create-torch-service"
                        },
                        {
                            "name": "torch-ddp-0-worker-1",
                            "template": "torch-ddp-1",
                            "arguments": {
                                "parameters": [
                                    {
                                        "name": "n_iter",
                                        "value": "{{workflow.parameters.n_iter}}"
                                    },
                                    {
                                        "name": "n_seconds_sleep",
                                        "value": "{{workflow.parameters.n_seconds_sleep}}"
                                    }
                                ]
                            },
                            "depends": "torch-ddp-create-torch-service"
                        },
                        {
                            "name": "torch-ddp-0-worker-2",
                            "template": "torch-ddp-2",
                            "arguments": {
                                "parameters": [
                                    {
                                        "name": "n_iter",
                                        "value": "{{workflow.parameters.n_iter}}"
                                    },
                                    {
                                        "name": "n_seconds_sleep",
                                        "value": "{{workflow.parameters.n_seconds_sleep}}"
                                    }
                                ]
                            },
                            "depends": "torch-ddp-create-torch-service"
                        },
                        {
                            "name": "torch-ddp-0-worker-3",
                            "template": "torch-ddp-3",
                            "arguments": {
                                "parameters": [
                                    {
                                        "name": "n_iter",
                                        "value": "{{workflow.parameters.n_iter}}"
                                    },
                                    {
                                        "name": "n_seconds_sleep",
                                        "value": "{{workflow.parameters.n_seconds_sleep}}"
                                    }
                                ]
                            },
                            "depends": "torch-ddp-create-torch-service"
                        },
                        {
                            "name": "torch-ddp-delete-torch-service",
                            "template": "torch-ddp-delete-torch-service",
                            "arguments": {},
                            "depends": "torch-ddp-0"
                        },
                        {
                            "name": "show-duration-param-0",
                            "template": "show-duration-param",
                            "arguments": {
                                "parameters": [
                                    {
                                        "name": "a",
                                        "value": "{{tasks.torch-ddp-0.outputs.parameters.duration}}"
                                    }
                                ]
                            },
                            "depends": "torch-ddp-0"
                        }
                    ]
                }
            },
            {
                "name": "torch-ddp-0",
                "inputs": {
                    "parameters": [
                        {
                            "name": "n_iter",
                            "default": "100"
                        },
                        {
                            "name": "n_seconds_sleep",
                            "default": "10"
                        },
                        {
                            "name": "duration",
                            "default": "null"
                        }
                    ]
                },
                "outputs": {
                    "parameters": [
                        {
                            "name": "duration",
                            "value_from": {
                                "path": "duration"
                            }
                        }
                    ]
                },
                "metadata": {
                    "labels": {
                        "torch-job": "torch-ddp-0-c3ee0689-7a0b-4be4-8754-a019d7030eb6",
                        "torch-node": "0"
                    }
                },
                "script": {
                    "image": "bettmensch88/bettmensch.ai-torch:3.11-latest",
                    "source": "import os\nimport sys\nsys.path.append(os.getcwd())\n\n# --- preprocessing\nimport json\ntry: n_iter = json.loads(r'''{{inputs.parameters.n_iter}}''')\nexcept: n_iter = r'''{{inputs.parameters.n_iter}}'''\ntry: n_seconds_sleep = json.loads(r'''{{inputs.parameters.n_seconds_sleep}}''')\nexcept: n_seconds_sleep = r'''{{inputs.parameters.n_seconds_sleep}}'''\n\nfrom bettmensch_ai.io import InputParameter\n\nfrom bettmensch_ai.io import OutputParameter\nduration = OutputParameter(\"duration\")\n\ndef torch_ddp(n_iter: InputParameter=100, n_seconds_sleep: InputParameter=10, duration: OutputParameter=None) -> None:\n    \"\"\"When decorated with the torch_component decorator, implements a\n    bettmensch_ai.TorchComponent that runs a torch DDP across pods and nodes in\n    your K8s cluster.\"\"\"\n    import time\n    from datetime import datetime as dt\n    import torch\n    import torch.distributed as dist\n    has_gpu = torch.cuda.is_available()\n    print(f'GPU present: {has_gpu}')\n    if has_gpu:\n        dist.init_process_group(backend='nccl')\n    else:\n        dist.init_process_group(backend='gloo')\n    for i in range(1, n_iter + 1):\n        time.sleep(n_seconds_sleep)\n        a = torch.tensor([dist.get_rank()])\n        print(f'{i}/{n_iter}: @{dt.now()}')\n        print(f'{i}/{n_iter}: Backend {dist.get_backend()}')\n        print(f'{i}/{n_iter}: World size {dist.get_world_size()}')\n        print(f'{i}/{n_iter}: Rank {dist.get_rank()}')\n        print(f'{i}/{n_iter}: This makes me worker process {dist.get_rank() + 1}/{dist.get_world_size()} globally!')\n        if has_gpu:\n            device = torch.device('cuda:0')\n            device_count = torch.cuda.device_count()\n            print(f'{i}/{n_iter}: GPU count: {device_count}')\n            device_name = torch.cuda.get_device_name(0)\n            print(f'{i}/{n_iter}: GPU name: {device_name}')\n            device_property = torch.cuda.get_device_capability(device)\n            print(f'{i}/{n_iter}: GPU property: {device_property}')\n        else:\n            device = torch.device('cpu')\n        a_placed = a.to(device)\n        print(f'{i}/{n_iter}: Pre-`all_reduce` tensor: {a_placed}')\n        dist.all_reduce(a_placed)\n        print(f'{i}/{n_iter}: Post-`all_reduce` tensor: {a_placed}')\n        print('===================================================')\n    if duration is not None:\n        duration_seconds = n_iter * n_seconds_sleep\n        duration.assign(duration_seconds)\n\nfrom bettmensch_ai.components import torch_distribute\n\ntorch_distribute_decorator=torch_distribute()\ntorch_distributed_function=torch_distribute_decorator(torch_ddp)\n\ntorch_distributed_function(n_iter,n_seconds_sleep,duration)",
                    "name": "",
                    "command": [
                        "python"
                    ],
                    "ports": [
                        {
                            "container_port": 29200,
                            "name": "ddp",
                            "protocol": "TCP"
                        }
                    ],
                    "env": [
                        {
                            "name": "NCCL_DEBUG",
                            "value": "INFO"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_min_nodes",
                            "value": "4"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_max_nodes",
                            "value": "4"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_node_rank",
                            "value": "0"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_nproc_per_node",
                            "value": "1"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_max_restarts",
                            "value": "1"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_start_method",
                            "value": "fork"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_rdzv_backend",
                            "value": "static"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_rdzv_endpoint_url",
                            "value": "torch-ddp-0-c3ee0689-7a0b-4be4-8754-a019d7030eb6.argo.svc.cluster.local"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_rdzv_endpoint_port",
                            "value": "29200"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_run_id",
                            "value": "1"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_tee",
                            "value": "0"
                        }
                    ],
                    "resources": {
                        "limits": {
                            "cpu": "100m",
                            "memory": "700Mi",
                            "nvidia.com/gpu": "1"
                        },
                        "requests": {
                            "cpu": "100m",
                            "memory": "700Mi",
                            "nvidia.com/gpu": "1"
                        }
                    },
                    "image_pull_policy": "Always"
                },
                "retry_strategy": {
                    "limit": "1",
                    "retry_policy": "OnError"
                },
                "tolerations": [
                    {
                        "key": "nvidia.com/gpu",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    }
                ],
                "pod_spec_patch": "topologySpreadConstraints:\n- maxSkew: 1\n  topologyKey: kubernetes.io/hostname\n  whenUnsatisfiable: DoNotSchedule\n  labelSelector:\n    matchExpressions:\n      - { key: torch-node, operator: In, values: ['0','1','2','3','4','5']}"
            },
            {
                "name": "torch-ddp-1",
                "inputs": {
                    "parameters": [
                        {
                            "name": "n_iter",
                            "default": "100"
                        },
                        {
                            "name": "n_seconds_sleep",
                            "default": "10"
                        },
                        {
                            "name": "duration",
                            "default": "null"
                        }
                    ]
                },
                "outputs": {
                    "parameters": [
                        {
                            "name": "duration",
                            "value_from": {
                                "path": "duration"
                            }
                        }
                    ]
                },
                "metadata": {
                    "labels": {
                        "torch-job": "torch-ddp-0-c3ee0689-7a0b-4be4-8754-a019d7030eb6",
                        "torch-node": "1"
                    }
                },
                "script": {
                    "image": "bettmensch88/bettmensch.ai-torch:3.11-latest",
                    "source": "import os\nimport sys\nsys.path.append(os.getcwd())\n\n# --- preprocessing\nimport json\ntry: n_iter = json.loads(r'''{{inputs.parameters.n_iter}}''')\nexcept: n_iter = r'''{{inputs.parameters.n_iter}}'''\ntry: n_seconds_sleep = json.loads(r'''{{inputs.parameters.n_seconds_sleep}}''')\nexcept: n_seconds_sleep = r'''{{inputs.parameters.n_seconds_sleep}}'''\n\nfrom bettmensch_ai.io import InputParameter\n\nfrom bettmensch_ai.io import OutputParameter\nduration = OutputParameter(\"duration\")\n\ndef torch_ddp(n_iter: InputParameter=100, n_seconds_sleep: InputParameter=10, duration: OutputParameter=None) -> None:\n    \"\"\"When decorated with the torch_component decorator, implements a\n    bettmensch_ai.TorchComponent that runs a torch DDP across pods and nodes in\n    your K8s cluster.\"\"\"\n    import time\n    from datetime import datetime as dt\n    import torch\n    import torch.distributed as dist\n    has_gpu = torch.cuda.is_available()\n    print(f'GPU present: {has_gpu}')\n    if has_gpu:\n        dist.init_process_group(backend='nccl')\n    else:\n        dist.init_process_group(backend='gloo')\n    for i in range(1, n_iter + 1):\n        time.sleep(n_seconds_sleep)\n        a = torch.tensor([dist.get_rank()])\n        print(f'{i}/{n_iter}: @{dt.now()}')\n        print(f'{i}/{n_iter}: Backend {dist.get_backend()}')\n        print(f'{i}/{n_iter}: World size {dist.get_world_size()}')\n        print(f'{i}/{n_iter}: Rank {dist.get_rank()}')\n        print(f'{i}/{n_iter}: This makes me worker process {dist.get_rank() + 1}/{dist.get_world_size()} globally!')\n        if has_gpu:\n            device = torch.device('cuda:0')\n            device_count = torch.cuda.device_count()\n            print(f'{i}/{n_iter}: GPU count: {device_count}')\n            device_name = torch.cuda.get_device_name(0)\n            print(f'{i}/{n_iter}: GPU name: {device_name}')\n            device_property = torch.cuda.get_device_capability(device)\n            print(f'{i}/{n_iter}: GPU property: {device_property}')\n        else:\n            device = torch.device('cpu')\n        a_placed = a.to(device)\n        print(f'{i}/{n_iter}: Pre-`all_reduce` tensor: {a_placed}')\n        dist.all_reduce(a_placed)\n        print(f'{i}/{n_iter}: Post-`all_reduce` tensor: {a_placed}')\n        print('===================================================')\n    if duration is not None:\n        duration_seconds = n_iter * n_seconds_sleep\n        duration.assign(duration_seconds)\n\nfrom bettmensch_ai.components import torch_distribute\n\ntorch_distribute_decorator=torch_distribute()\ntorch_distributed_function=torch_distribute_decorator(torch_ddp)\n\ntorch_distributed_function(n_iter,n_seconds_sleep,duration)",
                    "name": "",
                    "command": [
                        "python"
                    ],
                    "env": [
                        {
                            "name": "NCCL_DEBUG",
                            "value": "INFO"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_min_nodes",
                            "value": "4"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_max_nodes",
                            "value": "4"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_node_rank",
                            "value": "1"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_nproc_per_node",
                            "value": "1"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_max_restarts",
                            "value": "1"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_start_method",
                            "value": "fork"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_rdzv_backend",
                            "value": "static"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_rdzv_endpoint_url",
                            "value": "torch-ddp-0-c3ee0689-7a0b-4be4-8754-a019d7030eb6.argo.svc.cluster.local"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_rdzv_endpoint_port",
                            "value": "29200"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_run_id",
                            "value": "1"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_tee",
                            "value": "0"
                        }
                    ],
                    "resources": {
                        "limits": {
                            "cpu": "100m",
                            "memory": "700Mi",
                            "nvidia.com/gpu": "1"
                        },
                        "requests": {
                            "cpu": "100m",
                            "memory": "700Mi",
                            "nvidia.com/gpu": "1"
                        }
                    },
                    "image_pull_policy": "Always"
                },
                "retry_strategy": {
                    "limit": "1",
                    "retry_policy": "OnError"
                },
                "tolerations": [
                    {
                        "key": "nvidia.com/gpu",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    }
                ],
                "pod_spec_patch": "topologySpreadConstraints:\n- maxSkew: 1\n  topologyKey: kubernetes.io/hostname\n  whenUnsatisfiable: DoNotSchedule\n  labelSelector:\n    matchExpressions:\n      - { key: torch-node, operator: In, values: ['0','1','2','3','4','5']}"
            },
            {
                "name": "torch-ddp-2",
                "inputs": {
                    "parameters": [
                        {
                            "name": "n_iter",
                            "default": "100"
                        },
                        {
                            "name": "n_seconds_sleep",
                            "default": "10"
                        },
                        {
                            "name": "duration",
                            "default": "null"
                        }
                    ]
                },
                "outputs": {
                    "parameters": [
                        {
                            "name": "duration",
                            "value_from": {
                                "path": "duration"
                            }
                        }
                    ]
                },
                "metadata": {
                    "labels": {
                        "torch-job": "torch-ddp-0-c3ee0689-7a0b-4be4-8754-a019d7030eb6",
                        "torch-node": "2"
                    }
                },
                "script": {
                    "image": "bettmensch88/bettmensch.ai-torch:3.11-latest",
                    "source": "import os\nimport sys\nsys.path.append(os.getcwd())\n\n# --- preprocessing\nimport json\ntry: n_iter = json.loads(r'''{{inputs.parameters.n_iter}}''')\nexcept: n_iter = r'''{{inputs.parameters.n_iter}}'''\ntry: n_seconds_sleep = json.loads(r'''{{inputs.parameters.n_seconds_sleep}}''')\nexcept: n_seconds_sleep = r'''{{inputs.parameters.n_seconds_sleep}}'''\n\nfrom bettmensch_ai.io import InputParameter\n\nfrom bettmensch_ai.io import OutputParameter\nduration = OutputParameter(\"duration\")\n\ndef torch_ddp(n_iter: InputParameter=100, n_seconds_sleep: InputParameter=10, duration: OutputParameter=None) -> None:\n    \"\"\"When decorated with the torch_component decorator, implements a\n    bettmensch_ai.TorchComponent that runs a torch DDP across pods and nodes in\n    your K8s cluster.\"\"\"\n    import time\n    from datetime import datetime as dt\n    import torch\n    import torch.distributed as dist\n    has_gpu = torch.cuda.is_available()\n    print(f'GPU present: {has_gpu}')\n    if has_gpu:\n        dist.init_process_group(backend='nccl')\n    else:\n        dist.init_process_group(backend='gloo')\n    for i in range(1, n_iter + 1):\n        time.sleep(n_seconds_sleep)\n        a = torch.tensor([dist.get_rank()])\n        print(f'{i}/{n_iter}: @{dt.now()}')\n        print(f'{i}/{n_iter}: Backend {dist.get_backend()}')\n        print(f'{i}/{n_iter}: World size {dist.get_world_size()}')\n        print(f'{i}/{n_iter}: Rank {dist.get_rank()}')\n        print(f'{i}/{n_iter}: This makes me worker process {dist.get_rank() + 1}/{dist.get_world_size()} globally!')\n        if has_gpu:\n            device = torch.device('cuda:0')\n            device_count = torch.cuda.device_count()\n            print(f'{i}/{n_iter}: GPU count: {device_count}')\n            device_name = torch.cuda.get_device_name(0)\n            print(f'{i}/{n_iter}: GPU name: {device_name}')\n            device_property = torch.cuda.get_device_capability(device)\n            print(f'{i}/{n_iter}: GPU property: {device_property}')\n        else:\n            device = torch.device('cpu')\n        a_placed = a.to(device)\n        print(f'{i}/{n_iter}: Pre-`all_reduce` tensor: {a_placed}')\n        dist.all_reduce(a_placed)\n        print(f'{i}/{n_iter}: Post-`all_reduce` tensor: {a_placed}')\n        print('===================================================')\n    if duration is not None:\n        duration_seconds = n_iter * n_seconds_sleep\n        duration.assign(duration_seconds)\n\nfrom bettmensch_ai.components import torch_distribute\n\ntorch_distribute_decorator=torch_distribute()\ntorch_distributed_function=torch_distribute_decorator(torch_ddp)\n\ntorch_distributed_function(n_iter,n_seconds_sleep,duration)",
                    "name": "",
                    "command": [
                        "python"
                    ],
                    "env": [
                        {
                            "name": "NCCL_DEBUG",
                            "value": "INFO"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_min_nodes",
                            "value": "4"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_max_nodes",
                            "value": "4"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_node_rank",
                            "value": "2"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_nproc_per_node",
                            "value": "1"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_max_restarts",
                            "value": "1"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_start_method",
                            "value": "fork"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_rdzv_backend",
                            "value": "static"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_rdzv_endpoint_url",
                            "value": "torch-ddp-0-c3ee0689-7a0b-4be4-8754-a019d7030eb6.argo.svc.cluster.local"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_rdzv_endpoint_port",
                            "value": "29200"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_run_id",
                            "value": "1"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_tee",
                            "value": "0"
                        }
                    ],
                    "resources": {
                        "limits": {
                            "cpu": "100m",
                            "memory": "700Mi",
                            "nvidia.com/gpu": "1"
                        },
                        "requests": {
                            "cpu": "100m",
                            "memory": "700Mi",
                            "nvidia.com/gpu": "1"
                        }
                    },
                    "image_pull_policy": "Always"
                },
                "retry_strategy": {
                    "limit": "1",
                    "retry_policy": "OnError"
                },
                "tolerations": [
                    {
                        "key": "nvidia.com/gpu",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    }
                ],
                "pod_spec_patch": "topologySpreadConstraints:\n- maxSkew: 1\n  topologyKey: kubernetes.io/hostname\n  whenUnsatisfiable: DoNotSchedule\n  labelSelector:\n    matchExpressions:\n      - { key: torch-node, operator: In, values: ['0','1','2','3','4','5']}"
            },
            {
                "name": "torch-ddp-3",
                "inputs": {
                    "parameters": [
                        {
                            "name": "n_iter",
                            "default": "100"
                        },
                        {
                            "name": "n_seconds_sleep",
                            "default": "10"
                        },
                        {
                            "name": "duration",
                            "default": "null"
                        }
                    ]
                },
                "outputs": {
                    "parameters": [
                        {
                            "name": "duration",
                            "value_from": {
                                "path": "duration"
                            }
                        }
                    ]
                },
                "metadata": {
                    "labels": {
                        "torch-job": "torch-ddp-0-c3ee0689-7a0b-4be4-8754-a019d7030eb6",
                        "torch-node": "3"
                    }
                },
                "script": {
                    "image": "bettmensch88/bettmensch.ai-torch:3.11-latest",
                    "source": "import os\nimport sys\nsys.path.append(os.getcwd())\n\n# --- preprocessing\nimport json\ntry: n_iter = json.loads(r'''{{inputs.parameters.n_iter}}''')\nexcept: n_iter = r'''{{inputs.parameters.n_iter}}'''\ntry: n_seconds_sleep = json.loads(r'''{{inputs.parameters.n_seconds_sleep}}''')\nexcept: n_seconds_sleep = r'''{{inputs.parameters.n_seconds_sleep}}'''\n\nfrom bettmensch_ai.io import InputParameter\n\nfrom bettmensch_ai.io import OutputParameter\nduration = OutputParameter(\"duration\")\n\ndef torch_ddp(n_iter: InputParameter=100, n_seconds_sleep: InputParameter=10, duration: OutputParameter=None) -> None:\n    \"\"\"When decorated with the torch_component decorator, implements a\n    bettmensch_ai.TorchComponent that runs a torch DDP across pods and nodes in\n    your K8s cluster.\"\"\"\n    import time\n    from datetime import datetime as dt\n    import torch\n    import torch.distributed as dist\n    has_gpu = torch.cuda.is_available()\n    print(f'GPU present: {has_gpu}')\n    if has_gpu:\n        dist.init_process_group(backend='nccl')\n    else:\n        dist.init_process_group(backend='gloo')\n    for i in range(1, n_iter + 1):\n        time.sleep(n_seconds_sleep)\n        a = torch.tensor([dist.get_rank()])\n        print(f'{i}/{n_iter}: @{dt.now()}')\n        print(f'{i}/{n_iter}: Backend {dist.get_backend()}')\n        print(f'{i}/{n_iter}: World size {dist.get_world_size()}')\n        print(f'{i}/{n_iter}: Rank {dist.get_rank()}')\n        print(f'{i}/{n_iter}: This makes me worker process {dist.get_rank() + 1}/{dist.get_world_size()} globally!')\n        if has_gpu:\n            device = torch.device('cuda:0')\n            device_count = torch.cuda.device_count()\n            print(f'{i}/{n_iter}: GPU count: {device_count}')\n            device_name = torch.cuda.get_device_name(0)\n            print(f'{i}/{n_iter}: GPU name: {device_name}')\n            device_property = torch.cuda.get_device_capability(device)\n            print(f'{i}/{n_iter}: GPU property: {device_property}')\n        else:\n            device = torch.device('cpu')\n        a_placed = a.to(device)\n        print(f'{i}/{n_iter}: Pre-`all_reduce` tensor: {a_placed}')\n        dist.all_reduce(a_placed)\n        print(f'{i}/{n_iter}: Post-`all_reduce` tensor: {a_placed}')\n        print('===================================================')\n    if duration is not None:\n        duration_seconds = n_iter * n_seconds_sleep\n        duration.assign(duration_seconds)\n\nfrom bettmensch_ai.components import torch_distribute\n\ntorch_distribute_decorator=torch_distribute()\ntorch_distributed_function=torch_distribute_decorator(torch_ddp)\n\ntorch_distributed_function(n_iter,n_seconds_sleep,duration)",
                    "name": "",
                    "command": [
                        "python"
                    ],
                    "env": [
                        {
                            "name": "NCCL_DEBUG",
                            "value": "INFO"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_min_nodes",
                            "value": "4"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_max_nodes",
                            "value": "4"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_node_rank",
                            "value": "3"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_nproc_per_node",
                            "value": "1"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_max_restarts",
                            "value": "1"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_start_method",
                            "value": "fork"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_rdzv_backend",
                            "value": "static"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_rdzv_endpoint_url",
                            "value": "torch-ddp-0-c3ee0689-7a0b-4be4-8754-a019d7030eb6.argo.svc.cluster.local"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_rdzv_endpoint_port",
                            "value": "29200"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_run_id",
                            "value": "1"
                        },
                        {
                            "name": "bettmensch_ai_distributed_torch_tee",
                            "value": "0"
                        }
                    ],
                    "resources": {
                        "limits": {
                            "cpu": "100m",
                            "memory": "700Mi",
                            "nvidia.com/gpu": "1"
                        },
                        "requests": {
                            "cpu": "100m",
                            "memory": "700Mi",
                            "nvidia.com/gpu": "1"
                        }
                    },
                    "image_pull_policy": "Always"
                },
                "retry_strategy": {
                    "limit": "1",
                    "retry_policy": "OnError"
                },
                "tolerations": [
                    {
                        "key": "nvidia.com/gpu",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    }
                ],
                "pod_spec_patch": "topologySpreadConstraints:\n- maxSkew: 1\n  topologyKey: kubernetes.io/hostname\n  whenUnsatisfiable: DoNotSchedule\n  labelSelector:\n    matchExpressions:\n      - { key: torch-node, operator: In, values: ['0','1','2','3','4','5']}"
            },
            {
                "name": "show-duration-param",
                "inputs": {
                    "parameters": [
                        {
                            "name": "a"
                        }
                    ]
                },
                "outputs": {},
                "metadata": {},
                "script": {
                    "image": "bettmensch88/bettmensch.ai:3.11-latest",
                    "source": "import os\nimport sys\nsys.path.append(os.getcwd())\n\n# --- preprocessing\nimport json\ntry: a = json.loads(r'''{{inputs.parameters.a}}''')\nexcept: a = r'''{{inputs.parameters.a}}'''\n\nfrom bettmensch_ai.io import InputParameter\n\ndef show_parameter(a: InputParameter) -> None:\n    \"\"\"When decorated with the bettmensch_ai.components.component decorator,\n    implements a bettmensch_ai.Component that prints the values of its\n    InputParameter.\"\"\"\n    print(f'Content of input parameter a is: {a}')\nshow_parameter(a)",
                    "name": "",
                    "command": [
                        "python"
                    ],
                    "resources": {
                        "limits": {
                            "cpu": "100m",
                            "memory": "100Mi"
                        },
                        "requests": {
                            "cpu": "100m",
                            "memory": "100Mi"
                        }
                    },
                    "image_pull_policy": "Always"
                },
                "retry_strategy": {
                    "limit": "1",
                    "retry_policy": "OnError"
                }
            }
        ],
        "entrypoint": "bettmensch-ai-dag",
        "arguments": {
            "parameters": [
                {
                    "name": "n_iter",
                    "value": "null"
                },
                {
                    "name": "n_seconds_sleep",
                    "value": "null"
                }
            ]
        }
    }
}
{
    "metadata": {
        "creation_timestamp": "07/12/2024",
        "generate_name": "pipeline-test-torch-gpu-pipeline-",
        "generation": 1,
        "labels": {
            "workflows.argoproj.io/creator": "system-serviceaccount-argo-argo-server"
        },
        "managed_fields": [
            {
                "api_version": "argoproj.io/v1alpha1",
                "fields_type": "FieldsV1",
                "fields_v1": {},
                "manager": "argo",
                "operation": "Update",
                "time": "07/12/2024"
            }
        ],
        "name": "pipeline-test-torch-gpu-pipeline-7c4zp",
        "namespace": "argo",
        "resource_version": "9578",
        "uid": "612226a1-b40f-4f68-92c3-ea8a5d6b3995"
    },
    "spec": {
        "arguments": {
            "parameters": [
                {
                    "name": "n_iter"
                },
                {
                    "name": "n_seconds_sleep"
                }
            ]
        },
        "entrypoint": "bettmensch-ai-outer-dag",
        "templates": [
            {
                "inputs": {},
                "metadata": {},
                "name": "torch-ddp-create-torch-ddp-service",
                "outputs": {},
                "resource": {
                    "action": "create",
                    "manifest": "apiVersion: v1\nkind: Service\nmetadata:\n  name: torch-ddp-0-{{workflow.uid}}\n  namespace: argo\n  labels:\n    workflows.argoproj.io/workflow: {{workflow.name}}\n    torch-job: torch-ddp-0\nspec:\n  clusterIP: None  # ClusterIP set to None for headless service.\n  ports:\n  - name: ddp  # Port for torchrun master<->worker node coms.\n    port: 29200\n    targetPort: 29200\n  selector:\n    workflows.argoproj.io/workflow: {{workflow.name}}\n    torch-job: torch-ddp-0\n    torch-node: '0'  # Selector for pods associated with this service.\n"
                }
            },
            {
                "inputs": {},
                "metadata": {},
                "name": "torch-ddp-delete-torch-ddp-service",
                "outputs": {},
                "resource": {
                    "action": "delete",
                    "flags": [
                        "service",
                        "--selector",
                        "torch-job=torch-ddp-0,workflows.argoproj.io/workflow={{workflow.name}}",
                        "-n",
                        "argo"
                    ]
                }
            },
            {
                "dag": {
                    "tasks": [
                        {
                            "arguments": {},
                            "name": "torch-ddp-create-torch-ddp-service",
                            "template": "torch-ddp-create-torch-ddp-service"
                        },
                        {
                            "arguments": {
                                "parameters": [
                                    {
                                        "name": "n_iter",
                                        "value": "{{inputs.parameters.n_iter}}"
                                    },
                                    {
                                        "name": "n_seconds_sleep",
                                        "value": "{{inputs.parameters.n_seconds_sleep}}"
                                    }
                                ]
                            },
                            "depends": "torch-ddp-create-torch-ddp-service",
                            "name": "torch-ddp-0",
                            "template": "torch-ddp-0"
                        },
                        {
                            "arguments": {
                                "parameters": [
                                    {
                                        "name": "n_iter",
                                        "value": "{{inputs.parameters.n_iter}}"
                                    },
                                    {
                                        "name": "n_seconds_sleep",
                                        "value": "{{inputs.parameters.n_seconds_sleep}}"
                                    }
                                ]
                            },
                            "depends": "torch-ddp-create-torch-ddp-service",
                            "name": "torch-ddp-0-worker-1",
                            "template": "torch-ddp-1"
                        },
                        {
                            "arguments": {},
                            "depends": "torch-ddp-0",
                            "name": "torch-ddp-delete-torch-ddp-service",
                            "template": "torch-ddp-delete-torch-ddp-service"
                        },
                        {
                            "arguments": {
                                "parameters": [
                                    {
                                        "name": "a",
                                        "value": "{{tasks.torch-ddp-0.outputs.parameters.duration}}"
                                    }
                                ]
                            },
                            "depends": "torch-ddp-0",
                            "name": "show-duration-param-0",
                            "template": "show-duration-param"
                        }
                    ]
                },
                "inputs": {
                    "parameters": [
                        {
                            "name": "n_iter"
                        },
                        {
                            "name": "n_seconds_sleep"
                        }
                    ]
                },
                "metadata": {},
                "name": "bettmensch-ai-inner-dag",
                "outputs": {}
            },
            {
                "inputs": {
                    "parameters": [
                        {
                            "default": "100",
                            "name": "n_iter"
                        },
                        {
                            "default": "10",
                            "name": "n_seconds_sleep"
                        },
                        {
                            "default": "null",
                            "name": "duration"
                        }
                    ]
                },
                "metadata": {
                    "labels": {
                        "torch-job": "torch-ddp-0",
                        "torch-node": "0"
                    }
                },
                "name": "torch-ddp-0",
                "outputs": {
                    "parameters": [
                        {
                            "name": "duration",
                            "value_from": {
                                "path": "duration"
                            }
                        }
                    ]
                },
                "pod_spec_patch": "topologySpreadConstraints:\n- maxSkew: 1\n  topologyKey: kubernetes.io/hostname\n  whenUnsatisfiable: DoNotSchedule\n  labelSelector:\n    matchExpressions:\n      - { key: torch-node, operator: In, values: ['0','1','2','3','4','5']}",
                "retry_strategy": {
                    "limit": "1",
                    "retry_policy": "OnError"
                },
                "script": {
                    "command": [
                        "python"
                    ],
                    "env": [
                        {
                            "name": "NCCL_DEBUG",
                            "value": "INFO"
                        },
                        {
                            "name": "bettmensch_ai_torch_ddp_min_nodes",
                            "value": "2"
                        },
                        {
                            "name": "bettmensch_ai_torch_ddp_max_nodes",
                            "value": "2"
                        },
                        {
                            "name": "bettmensch_ai_torch_ddp_node_rank",
                            "value": "0"
                        },
                        {
                            "name": "bettmensch_ai_torch_ddp_nproc_per_node",
                            "value": "1"
                        },
                        {
                            "name": "bettmensch_ai_torch_ddp_max_restarts",
                            "value": "1"
                        },
                        {
                            "name": "bettmensch_ai_torch_ddp_start_method",
                            "value": "fork"
                        },
                        {
                            "name": "bettmensch_ai_torch_ddp_rdzv_backend",
                            "value": "static"
                        },
                        {
                            "name": "bettmensch_ai_torch_ddp_rdzv_endpoint_url",
                            "value": "torch-ddp-0-{{workflow.uid}}.argo.svc.cluster.local"
                        },
                        {
                            "name": "bettmensch_ai_torch_ddp_rdzv_endpoint_port",
                            "value": "29200"
                        },
                        {
                            "name": "bettmensch_ai_torch_ddp_run_id",
                            "value": "1"
                        },
                        {
                            "name": "bettmensch_ai_torch_ddp_tee",
                            "value": "0"
                        }
                    ],
                    "image": "bettmensch88/bettmensch.ai-pytorch:3.11-latest",
                    "image_pull_policy": "Always",
                    "name": "",
                    "ports": [
                        {
                            "container_port": 29200,
                            "name": "ddp",
                            "protocol": "TCP"
                        }
                    ],
                    "resources": {
                        "limits": {
                            "cpu": "100m",
                            "memory": "700Mi",
                            "nvidia.com/gpu": "1"
                        },
                        "requests": {
                            "cpu": "100m",
                            "memory": "700Mi",
                            "nvidia.com/gpu": "1"
                        }
                    },
                    "source": "import os\nimport sys\nsys.path.append(os.getcwd())\n\n# --- preprocessing\nimport json\ntry: n_iter = json.loads(r'''{{inputs.parameters.n_iter}}''')\nexcept: n_iter = r'''{{inputs.parameters.n_iter}}'''\ntry: n_seconds_sleep = json.loads(r'''{{inputs.parameters.n_seconds_sleep}}''')\nexcept: n_seconds_sleep = r'''{{inputs.parameters.n_seconds_sleep}}'''\n\nfrom bettmensch_ai.pipelines.io import InputParameter\n\nfrom bettmensch_ai.pipelines.io import OutputParameter\nduration = OutputParameter(\"duration\")\n\ndef tensor_reduce(n_iter: InputParameter=100, n_seconds_sleep: InputParameter=10, duration: OutputParameter=None) -> None:\n    \"\"\"When decorated with the torch_component decorator, implements a\n    bettmensch_ai.TorchComponent that runs a torch DDP across pods and nodes in\n    your K8s cluster.\"\"\"\n    import time\n    from datetime import datetime as dt\n    import GPUtil\n    import torch\n    import torch.distributed as dist\n    from bettmensch_ai.pipelines.component.torch_ddp import LaunchContext\n    has_gpu = torch.cuda.is_available()\n    ddp_context = LaunchContext()\n    print(f'GPU present: {has_gpu}')\n    if has_gpu:\n        dist.init_process_group(backend='nccl')\n    else:\n        dist.init_process_group(backend='gloo')\n    for i in range(1, n_iter + 1):\n        time.sleep(n_seconds_sleep)\n        GPUtil.showUtilization()\n        a = torch.tensor([ddp_context.rank])\n        print(f'{i}/{n_iter}: @{dt.now()}')\n        print(f'{i}/{n_iter}: Backend {dist.get_backend()}')\n        print(f'{i}/{n_iter}: Global world size: {ddp_context.world_size}')\n        print(f'{i}/{n_iter}: Global worker process rank: {ddp_context.rank}')\n        print(f'{i}/{n_iter}: This makes me worker process {ddp_context.rank + 1}/{ddp_context.world_size} globally!')\n        print(f'{i}/{n_iter}: Local rank of worker: {ddp_context.local_rank}')\n        print(f'{i}/{n_iter}: Local world size: {ddp_context.local_world_size}')\n        print(f'{i}/{n_iter}: This makes me worker process {ddp_context.local_rank + 1}/{ddp_context.local_world_size} locally!')\n        print(f'{i}/{n_iter}: Node/pod rank: {ddp_context.group_rank}')\n        if has_gpu:\n            device = torch.device(f'cuda:{ddp_context.local_rank}')\n            device_count = torch.cuda.device_count()\n            print(f'{i}/{n_iter}: GPU count: {device_count}')\n            device_name = torch.cuda.get_device_name(ddp_context.local_rank)\n            print(f'{i}/{n_iter}: GPU name: {device_name}')\n            device_property = torch.cuda.get_device_capability(device)\n            print(f'{i}/{n_iter}: GPU property: {device_property}')\n        else:\n            device = torch.device('cpu')\n        a_placed = a.to(device)\n        print(f'{i}/{n_iter}: Pre-`all_reduce` tensor: {a_placed}')\n        dist.all_reduce(a_placed)\n        print(f'{i}/{n_iter}: Post-`all_reduce` tensor: {a_placed}')\n        print('===================================================')\n    if duration is not None:\n        duration_seconds = n_iter * n_seconds_sleep\n        duration.assign(duration_seconds)\n\nfrom torch.distributed.elastic.multiprocessing.errors import record\n\ntensor_reduce=record(tensor_reduce)\n\nfrom bettmensch_ai.pipelines.component import as_torch_ddp\n\ntorch_ddp_decorator=as_torch_ddp()\n\ntorch_ddp_function=torch_ddp_decorator(tensor_reduce)\n\n\ntorch_ddp_function(n_iter,n_seconds_sleep,duration)"
                },
                "tolerations": [
                    {
                        "effect": "NoSchedule",
                        "key": "nvidia.com/gpu",
                        "operator": "Exists"
                    }
                ]
            },
            {
                "inputs": {
                    "parameters": [
                        {
                            "default": "100",
                            "name": "n_iter"
                        },
                        {
                            "default": "10",
                            "name": "n_seconds_sleep"
                        },
                        {
                            "default": "null",
                            "name": "duration"
                        }
                    ]
                },
                "metadata": {
                    "labels": {
                        "torch-job": "torch-ddp-0",
                        "torch-node": "1"
                    }
                },
                "name": "torch-ddp-1",
                "outputs": {
                    "parameters": [
                        {
                            "name": "duration",
                            "value_from": {
                                "path": "duration"
                            }
                        }
                    ]
                },
                "pod_spec_patch": "topologySpreadConstraints:\n- maxSkew: 1\n  topologyKey: kubernetes.io/hostname\n  whenUnsatisfiable: DoNotSchedule\n  labelSelector:\n    matchExpressions:\n      - { key: torch-node, operator: In, values: ['0','1','2','3','4','5']}",
                "retry_strategy": {
                    "limit": "1",
                    "retry_policy": "OnError"
                },
                "script": {
                    "command": [
                        "python"
                    ],
                    "env": [
                        {
                            "name": "NCCL_DEBUG",
                            "value": "INFO"
                        },
                        {
                            "name": "bettmensch_ai_torch_ddp_min_nodes",
                            "value": "2"
                        },
                        {
                            "name": "bettmensch_ai_torch_ddp_max_nodes",
                            "value": "2"
                        },
                        {
                            "name": "bettmensch_ai_torch_ddp_node_rank",
                            "value": "1"
                        },
                        {
                            "name": "bettmensch_ai_torch_ddp_nproc_per_node",
                            "value": "1"
                        },
                        {
                            "name": "bettmensch_ai_torch_ddp_max_restarts",
                            "value": "1"
                        },
                        {
                            "name": "bettmensch_ai_torch_ddp_start_method",
                            "value": "fork"
                        },
                        {
                            "name": "bettmensch_ai_torch_ddp_rdzv_backend",
                            "value": "static"
                        },
                        {
                            "name": "bettmensch_ai_torch_ddp_rdzv_endpoint_url",
                            "value": "torch-ddp-0-{{workflow.uid}}.argo.svc.cluster.local"
                        },
                        {
                            "name": "bettmensch_ai_torch_ddp_rdzv_endpoint_port",
                            "value": "29200"
                        },
                        {
                            "name": "bettmensch_ai_torch_ddp_run_id",
                            "value": "1"
                        },
                        {
                            "name": "bettmensch_ai_torch_ddp_tee",
                            "value": "0"
                        }
                    ],
                    "image": "bettmensch88/bettmensch.ai-pytorch:3.11-latest",
                    "image_pull_policy": "Always",
                    "name": "",
                    "resources": {
                        "limits": {
                            "cpu": "100m",
                            "memory": "700Mi",
                            "nvidia.com/gpu": "1"
                        },
                        "requests": {
                            "cpu": "100m",
                            "memory": "700Mi",
                            "nvidia.com/gpu": "1"
                        }
                    },
                    "source": "import os\nimport sys\nsys.path.append(os.getcwd())\n\n# --- preprocessing\nimport json\ntry: n_iter = json.loads(r'''{{inputs.parameters.n_iter}}''')\nexcept: n_iter = r'''{{inputs.parameters.n_iter}}'''\ntry: n_seconds_sleep = json.loads(r'''{{inputs.parameters.n_seconds_sleep}}''')\nexcept: n_seconds_sleep = r'''{{inputs.parameters.n_seconds_sleep}}'''\n\nfrom bettmensch_ai.pipelines.io import InputParameter\n\nfrom bettmensch_ai.pipelines.io import OutputParameter\nduration = OutputParameter(\"duration\")\n\ndef tensor_reduce(n_iter: InputParameter=100, n_seconds_sleep: InputParameter=10, duration: OutputParameter=None) -> None:\n    \"\"\"When decorated with the torch_component decorator, implements a\n    bettmensch_ai.TorchComponent that runs a torch DDP across pods and nodes in\n    your K8s cluster.\"\"\"\n    import time\n    from datetime import datetime as dt\n    import GPUtil\n    import torch\n    import torch.distributed as dist\n    from bettmensch_ai.pipelines.component.torch_ddp import LaunchContext\n    has_gpu = torch.cuda.is_available()\n    ddp_context = LaunchContext()\n    print(f'GPU present: {has_gpu}')\n    if has_gpu:\n        dist.init_process_group(backend='nccl')\n    else:\n        dist.init_process_group(backend='gloo')\n    for i in range(1, n_iter + 1):\n        time.sleep(n_seconds_sleep)\n        GPUtil.showUtilization()\n        a = torch.tensor([ddp_context.rank])\n        print(f'{i}/{n_iter}: @{dt.now()}')\n        print(f'{i}/{n_iter}: Backend {dist.get_backend()}')\n        print(f'{i}/{n_iter}: Global world size: {ddp_context.world_size}')\n        print(f'{i}/{n_iter}: Global worker process rank: {ddp_context.rank}')\n        print(f'{i}/{n_iter}: This makes me worker process {ddp_context.rank + 1}/{ddp_context.world_size} globally!')\n        print(f'{i}/{n_iter}: Local rank of worker: {ddp_context.local_rank}')\n        print(f'{i}/{n_iter}: Local world size: {ddp_context.local_world_size}')\n        print(f'{i}/{n_iter}: This makes me worker process {ddp_context.local_rank + 1}/{ddp_context.local_world_size} locally!')\n        print(f'{i}/{n_iter}: Node/pod rank: {ddp_context.group_rank}')\n        if has_gpu:\n            device = torch.device(f'cuda:{ddp_context.local_rank}')\n            device_count = torch.cuda.device_count()\n            print(f'{i}/{n_iter}: GPU count: {device_count}')\n            device_name = torch.cuda.get_device_name(ddp_context.local_rank)\n            print(f'{i}/{n_iter}: GPU name: {device_name}')\n            device_property = torch.cuda.get_device_capability(device)\n            print(f'{i}/{n_iter}: GPU property: {device_property}')\n        else:\n            device = torch.device('cpu')\n        a_placed = a.to(device)\n        print(f'{i}/{n_iter}: Pre-`all_reduce` tensor: {a_placed}')\n        dist.all_reduce(a_placed)\n        print(f'{i}/{n_iter}: Post-`all_reduce` tensor: {a_placed}')\n        print('===================================================')\n    if duration is not None:\n        duration_seconds = n_iter * n_seconds_sleep\n        duration.assign(duration_seconds)\n\nfrom torch.distributed.elastic.multiprocessing.errors import record\n\ntensor_reduce=record(tensor_reduce)\n\nfrom bettmensch_ai.pipelines.component import as_torch_ddp\n\ntorch_ddp_decorator=as_torch_ddp()\n\ntorch_ddp_function=torch_ddp_decorator(tensor_reduce)\n\n\ntorch_ddp_function(n_iter,n_seconds_sleep,duration)"
                },
                "tolerations": [
                    {
                        "effect": "NoSchedule",
                        "key": "nvidia.com/gpu",
                        "operator": "Exists"
                    }
                ]
            },
            {
                "inputs": {
                    "parameters": [
                        {
                            "name": "a"
                        }
                    ]
                },
                "metadata": {},
                "name": "show-duration-param",
                "outputs": {},
                "retry_strategy": {
                    "limit": "1",
                    "retry_policy": "OnError"
                },
                "script": {
                    "command": [
                        "python"
                    ],
                    "image": "bettmensch88/bettmensch.ai-standard:3.11-latest",
                    "image_pull_policy": "Always",
                    "name": "",
                    "resources": {
                        "limits": {
                            "cpu": "100m",
                            "memory": "100Mi"
                        },
                        "requests": {
                            "cpu": "100m",
                            "memory": "100Mi"
                        }
                    },
                    "source": "import os\nimport sys\nsys.path.append(os.getcwd())\n\n# --- preprocessing\nimport json\ntry: a = json.loads(r'''{{inputs.parameters.a}}''')\nexcept: a = r'''{{inputs.parameters.a}}'''\n\nfrom bettmensch_ai.pipelines.io import InputParameter\n\ndef show_parameter(a: InputParameter) -> None:\n    \"\"\"When decorated with the bettmensch_ai.components.component decorator,\n    implements a bettmensch_ai.Component that prints the values of its\n    InputParameter.\"\"\"\n    print(f'Content of input parameter a is: {a}')\n\nshow_parameter(a)\n"
                }
            },
            {
                "dag": {
                    "tasks": [
                        {
                            "arguments": {
                                "parameters": [
                                    {
                                        "name": "n_iter",
                                        "value": "{{workflow.parameters.n_iter}}"
                                    },
                                    {
                                        "name": "n_seconds_sleep",
                                        "value": "{{workflow.parameters.n_seconds_sleep}}"
                                    }
                                ]
                            },
                            "name": "bettmensch-ai-inner-dag",
                            "template": "bettmensch-ai-inner-dag"
                        }
                    ]
                },
                "inputs": {},
                "metadata": {},
                "name": "bettmensch-ai-outer-dag",
                "outputs": {}
            }
        ]
    }
}
import streamlit as st
from streamlit_option_menu import option_menu
from streamlit_flow import streamlit_flow
from streamlit_flow.interfaces import StreamlitFlowNode, StreamlitFlowEdge
from pipeline import Pipeline
from flow import Flow
from utils import add_logo, get_colors, configuration, get_workflow_templates, get_workflows
from typing import Callable, Dict, List
import pandas as pd
import sys
#sys.path.append('C:\\Users\\bettmensch\\GitReps\\bettmensch.ai\\bettmensch_ai_dashboard\\src')

st.set_page_config(
    page_title="Pipelines",
    page_icon=":twisted_rightwards_arrows:",
)

def get_pipeline_meta_data(registered_pipelines) -> List[Dict]:
    """Retrieves the metadata field from all the ArgoWorkflowTemplate CRs obtained by `get_workflow_templates`.

    Args:
        registered_pipelines (List[IoArgoprojWorkflowV1alpha1WorkflowTemplate]): The ArgoWorkflowTemplate CRs 
            obtained by `get_workflow_templates`

    Returns:
        List[Dict]: A list of dictionaries containing the metadata of each ArgoWorkflowTemplate resource.
    """
    
    return [registered_pipeline.metadata.to_dict() for registered_pipeline in registered_pipelines]

def get_pipeline_summary_table(pipeline_meta_data) -> pd.DataFrame:
    """Generates a summary table displaying the key specs of the registered pipelines.

    Args:
        pipeline_meta_data (List[Dict]): The pipeline metadata generated by `get_pipeline_meta_data`.

    Returns:
        pd.DataFrame: The pipeline summary table shown on the frontend.
    """
    
    return pd.DataFrame(pipeline_meta_data)[['name','uid','creation_timestamp']]. \
        rename(columns={'name':'Name','uid':'ID','creation_timestamp':'Created'}). \
        sort_values(by='Created',ignore_index=True)
        
def get_pipeline_names(pipeline_meta_data) -> List[str]:
    """Generates a list of names of all registered pipelines.

    Args:
        pipeline_meta_data (List[Dict]): The pipeline metadata generated by `get_pipeline_meta_data`.

    Returns:
        List[str]: The names of all available registered pipelines.
    """
    
    return [resource_meta['name'] for resource_meta in pipeline_meta_data]
        
def get_formatted_pipeline_data(registered_pipelines, pipeline_meta_data, pipeline_names):
    """Generates structured pipeline data for easier frontend useage.

    Args:
        registered_pipelines (List[IoArgoprojWorkflowV1alpha1WorkflowTemplate]): The ArgoWorkflowTemplate CRs 
            obtained by `get_workflow_templates`
        pipeline_meta_data (_type_): _description_
        pipeline_names (List[str]): The names of pipelines generated by `get_pipeline_names`.

    Returns:
        _type_: _description_
    """
    
    formatted_pipeline_data = {
        'resource':{},
        'metadata': {},
        'inputs': {},
        'dag': {},
        'templates': {},
    }

    for i, (resource_name, registered_pipeline) in enumerate(zip(pipeline_names,registered_pipelines)):
        try:
            pipeline_dict = Pipeline.from_argo_workflow_cr(registered_pipeline).model_dump()
            formatted_pipeline_data['resource'][resource_name] = Pipeline.from_argo_workflow_cr(registered_pipeline)
            formatted_pipeline_data['metadata'][resource_name] = pipeline_meta_data[i]
            formatted_pipeline_data['inputs'][resource_name] = pipeline_dict['inputs']
            formatted_pipeline_data['dag'][resource_name] = pipeline_dict['dag']
            formatted_pipeline_data['templates'][resource_name] = pipeline_dict['templates']
        except Exception as e:
            print(e)
            st.write(f"Oops! Could not collect data for Pipeline {resource_name}: {e} Please make sure the workflow template was created with the bettmensch.ai SDK and was submitted successfully.")

    return formatted_pipeline_data

def display_pipeline_dropdown_and_ios_toggle(pipeline_names):
    """Display the pipeline selection dropdown and the dag visualization I/O detail toggle.

    Args:
        pipeline_names (List[str]): The names of pipelines generated by `get_pipeline_names`.

    Returns:
        _type_: _description_
    """
    
    col1, col2 = st.columns([2,1])

    with col1:
        # display pipeline selection dropdown
        selected_pipeline = st.selectbox(f'Select a Pipeline:', options=pipeline_names, index=0)
    with col2:
        # display dag I/O display toggle
        st.text('')
        st.text('')
        display_pipeline_ios = st.toggle(f'Display pipeline & task I/O')
        
    return selected_pipeline, display_pipeline_ios

def display_pipeline_dag(formatted_pipeline_data, selected_pipeline, display_pipeline_ios):
    """_summary_

    Args:
        formatted_pipeline_data (_type_): The formatted pipeline data generated by `get_formatted_pipeline_data`.
        selected_pipeline (str): The name of the user selected pipeline.
        display_pipeline_ios (bool): The toggle value of the user selected pipeline dag I/O detail level.

    Returns:
        _type_: _description_
    """
    
    dag_visualization_schema = formatted_pipeline_data['resource'][selected_pipeline].create_dag_visualization_schema(display_pipeline_ios)
            
    dag_visualization_element = streamlit_flow(
        nodes = [StreamlitFlowNode(**node.model_dump()) for node in dag_visualization_schema.nodes],
        edges = [StreamlitFlowEdge(**connection.model_dump()) for connection in dag_visualization_schema.connections],
        get_node_on_click=True,
        get_edge_on_click=True,
        fit_view=True,
        direction="down",
        style={"backgroundColor": get_colors('custom').secondaryBackgroundColor},
        layout_vertical_spacing=25,
        layout_horizontal_spacing=100,
    )
    
    return dag_visualization_schema, dag_visualization_element

def display_pipeline_dag_selection(dag_visualization_element):
    
    with st.expander("See explanation",expanded=dag_visualization_element is not None):
        try:
            element_type = dag_visualization_element['elementType']
            element_id = dag_visualization_element['id']
        except TypeError:
            element_type = element_id = None
        st.write(f"Currently selected {element_type} {element_id}")

def main():
    """Utility function to render the pipeline resources.
    """
    
    st.markdown(
        """
        # :twisted_rightwards_arrows: Pipelines
        
        A `Pipeline` is the *definition* of the workflow, i.e. its DAG declaring the logic of each node and dependencies on other nodes.
        
        This section displays all registered `Pipeline`s.
        """
    )
    
    workflow_templates = get_workflow_templates(configuration)
    
    meta_data = get_pipeline_meta_data(workflow_templates)
    summary_table = get_pipeline_summary_table(meta_data)
    
    # display summary table
    summary_table
    
    names = get_pipeline_names(meta_data)
    
    formatted_pipeline_data = get_formatted_pipeline_data(workflow_templates, meta_data, names)
    
    selected_pipeline, display_pipeline_ios = display_pipeline_dropdown_and_ios_toggle(names)
    
    dag_visualization_schema, dag_visualization_element = display_pipeline_dag(formatted_pipeline_data,selected_pipeline,display_pipeline_ios)

    display_pipeline_dag_selection(dag_visualization_element)
        
    with st.sidebar:
        add_logo(sidebar=True)

main()